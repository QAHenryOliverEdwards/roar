{"version":3,"sources":["components/Title.js","components/Searchbar.js","functions/constructPostDictionary.js","components/Post.js","components/Reply.js","functions/getUserID.js","components/PostsTable.js","components/LogoutButton.js","components/MakePost.js","pages/Homepage.js","components/LoginInput.js","components/PasswordInput.js","components/LoginTitle.js","components/RegisterButton.js","components/LoginButton.js","components/RegisterTitle.js","components/FormInput.js","pages/Register.js","pages/LoginRegister.js","App.js","index.js"],"names":["Title","props","style","className","Searchbar","userInputFunc","searchFunc","InputGroup","type","onChange","event","Button","variant","onClick","findUserIDWithPostID","postID","userList","user","currentUser","post","id","constructPostDictionary","allUsers","postDictionaryList","forEach","posts","postItem","name","body","searchChildren3","parent","children","recursionLevel","Array","isArray","length","child","console","log","childUserID","childrenID","push","pID","cID","uID","level","Post","replyBoxProps","replyBoxFunc","setReplyBoxText","submitReplyFunc","selfEditBoxProps","editBoxFunc","setSelfEditBoxText","submitEditFunc","deleteFunc","editButtons","isBox","isEditBox","Card","Text","rows","Reply","getUserID","auth","a","fetch","headers","response","text","PostsTable","postDictionary","reloadPosts","useState","elementArray","setElementArray","replyBox","setReplyBox","currentPostDictionary","setCurrentPostDictionary","selfEdit","setSelfEdit","pushPostDictionaryChanges","useCallback","changeSelfReplyBox","selfReplyToChange","toApply","currentPost","thisReply","changeSpecificSelfReply","edit","currentEdit","boxText","target","value","submitEdit","sessionStorage","getItem","editObj","method","JSON","stringify","status","newEditBoxList","deletePost","changeReplyBox","replyToChange","changeSpecificReplyBox","reply","currentReply","submitReply","replyObj","userID","replyBoxObj","newReplyBoxList","makePostElement","newElementArray","ignore","getPost","ID","maxLevel","b","getMaxLevel","constructChildren","parentID","postsToIgnore","currentChild","match","selfEditObj","replyPropObj","replyProp","thisPost","includes","fp","initialParentID","concat","useEffect","LogoutButton","setLogoutFunc","setItem","MakePost","setPostText","submitPostFunc","Homepage","setAllUsers","setPostDictionary","searchText","setSearchText","postText","getAllUsers","json","constructAllPosts","newPostDictionary","constructPage","submitPost","postObj","resetAllUsers","searchedPosts","toLowerCase","LoginInput","inputFunc","placeholder","PasswordInput","LoginTitle","RegisterButton","redirectFunc","LoginButton","loginFunc","RegisterTitle","FormInput","Register","setLoginFunc","username","setUsername","setName","email","setEmail","password","setPassword","auth_key","submitUserData","bodyObj","LoginRegister","register","setRegister","inputUsername","inputPassword","registerRedirectFunc","defaultValue","App","loggedIn","setLoggedIn","page","setPage","checkLoggedIn","getPageToDisplay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2161f27c.chunk.js","sourcesContent":["const Title =(props)=>{\r\n    const {style} = props;\r\n    return (\r\n        <h1 className={'title'} style={style}>Welcome to Roar</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import {InputGroup, Button} from \"react-bootstrap\";\r\n\r\nconst Searchbar = (props) => {\r\n    const {userInputFunc, searchFunc} = props;\r\n    return (\r\n        <InputGroup className={'my-3'}>\r\n            <input type={'search'} onChange={(event) => (userInputFunc(event))} className={'form-control'}/>\r\n            <Button variant={'secondary'} onClick={()=>(searchFunc())}>Search</Button>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","const constructPostDictionary = (allUsers) => {\r\n    const postDictionaryList = [];\r\n    allUsers.forEach((user) => {\r\n        user.posts.forEach((post) => {\r\n            let postItem = {\r\n                'userID': user.id,\r\n                'postID': post.id,\r\n                'name': user.name,\r\n                'body': post.body,\r\n                'childrenID': []\r\n            }\r\n            const searchChildren3 = (parent, children, recursionLevel) => {\r\n                if (Array.isArray(children) && (children.length !== 0)) {\r\n                    recursionLevel += 1;\r\n                    children.forEach((child) => {\r\n                        console.log(child)\r\n                        let childUserID = findUserIDWithPostID(child.id, allUsers)\r\n                        postItem.childrenID.push({\r\n                            pID: parent.id,\r\n                            cID: child.id,\r\n                            uID: childUserID,\r\n                            level: recursionLevel\r\n                        });\r\n                        return searchChildren3(child, child.children, recursionLevel);\r\n                    })\r\n                } else {\r\n                    return postItem;\r\n                }\r\n            }\r\n            searchChildren3(post, post.children, 0);\r\n            postDictionaryList.push(postItem);\r\n        })\r\n    })\r\n    return postDictionaryList;\r\n}\r\n\r\nconst findUserIDWithPostID = (postID, userList) => {\r\n    for (let user in userList) {\r\n        let currentUser = userList[user]\r\n        for (let post in userList[user]['posts']) {\r\n            let currentPost = userList[user]['posts'][post]\r\n            if (currentPost.id === postID) {\r\n                return currentUser.id\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default constructPostDictionary;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Post = (props) => {\r\n\r\n    let {\r\n        post, replyBoxProps, replyBoxFunc,\r\n        setReplyBoxText, submitReplyFunc, selfEditBoxProps,\r\n        editBoxFunc, setSelfEditBoxText, submitEditFunc,\r\n        deleteFunc, editButtons\r\n    } = props;\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <Card className={'dark-green-bg'}>\r\n    //             <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n    //             <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n    //             <Button variant={'link'} onClick={()=>{replyBoxFunc(replyBoxProps.postID)}}\r\n    //                     className={'button-as-link px-0'}>Reply</Button>\r\n    //         </Card>\r\n    //     </div>\r\n    // )\r\n\r\n    if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === false && editButtons === true) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-10'}>{post.name}</Card.Title>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        editBoxFunc(selfEditBoxProps.postID)\r\n                                    }}\r\n                            >{'\\u270F'}</Button>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        deleteFunc(post.postID)\r\n                                    }}\r\n                            >{'\\u{1F5D1}'}</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }}\r\n                            className={'button-as-link px-0'}>Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === false && editButtons === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-12'}>{post.name}</Card.Title>\r\n                            {/*<Button variant={'link'}*/}\r\n                            {/*        className={'col-1 justify-content-end card-title button-no-decoration'}*/}\r\n                            {/*        onClick={() => {*/}\r\n                            {/*            editBoxFunc(selfEditBoxProps.postID)*/}\r\n                            {/*        }}*/}\r\n                            {/*>{'\\u270F'}</Button>*/}\r\n                            {/*<Button variant={'link'}*/}\r\n                            {/*        className={'col-1 justify-content-end card-title button-no-decoration'}*/}\r\n                            {/*        onClick={() => {*/}\r\n                            {/*            deleteFunc(post.postID)*/}\r\n                            {/*        }}*/}\r\n                            {/*>{'\\u{1F5D1}'}</Button>*/}\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }}\r\n                            className={'button-as-link px-0'}>Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === true) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setSelfEditBoxText(selfEditBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitEditFunc(selfEditBoxProps.postID)\r\n                    }}>\r\n                        Finish Edit!\r\n                    </Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setReplyBoxText(replyBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitReplyFunc(replyBoxProps.postID)\r\n                    }}\r\n                    >Submit Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Reply = (props) => {\r\n\r\n    const {\r\n        post, selfEditBoxProps, editBoxFunc,\r\n        setSelfEditBoxText, submitEditFunc,\r\n        deleteFunc, editButtons, replyBoxProps,\r\n        replyBoxFunc, setReplyBoxText, submitReplyFunc\r\n    } = props;\r\n\r\n    if (selfEditBoxProps.isEditBox === false && editButtons === true && replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-10'}>{post.name}</Card.Title>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        editBoxFunc(selfEditBoxProps.postID)\r\n                                    }}\r\n                            >{'\\u270F'}</Button>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        deleteFunc(post.postID)\r\n                                    }}>{'\\u{1F5D1}'}</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }} className={'button-as-link px-0'}>Reply</Button>\r\n                    <Card.Text className={'post-text'}>At reply level {post.level}</Card.Text>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (selfEditBoxProps.isEditBox === false && editButtons === false && replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-12'}>{post.name}</Card.Title>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxProps(replyBoxProps.postID)\r\n                    }} className={'button-as-link px-0'}>Reply</Button>\r\n                    <Card.Text className={'post-text'}>At reply level {post.level}</Card.Text>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (selfEditBoxProps.isEditBox === true && replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setSelfEditBoxText(selfEditBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitEditFunc(selfEditBoxProps.postID)\r\n                    }}>\r\n                        Finish Edit!\r\n                    </Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event)=>{\r\n                        setReplyBoxText(replyBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitReplyFunc(replyBoxProps.postID)\r\n                    }}\r\n                    >Submit Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Reply;","const getUserID = async (auth)=>{\r\n    let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/getID', {\r\n        headers: {\r\n            'token': auth\r\n        }\r\n    })\r\n    return await response.text();\r\n}\r\n\r\nexport default getUserID;","import Post from \"./Post\";\r\nimport Reply from \"./Reply\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst PostsTable = (props) => {\r\n\r\n    const {postDictionary, reloadPosts} = props;\r\n\r\n    const [elementArray, setElementArray] = useState([]);\r\n    const [replyBox, setReplyBox] = useState([]);\r\n    const [currentPostDictionary, setCurrentPostDictionary] = useState([]);\r\n    const [selfEdit, setSelfEdit] = useState([]);\r\n\r\n    const pushPostDictionaryChanges = useCallback(() => {\r\n        setCurrentPostDictionary(postDictionary)\r\n    }, [postDictionary])\r\n\r\n    const changeSelfReplyBox = useCallback((selfReplyToChange) => {\r\n        const toApply = [];\r\n        if (!selfReplyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isEditBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setSelfEdit(toApply);\r\n        } else if (selfReplyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (selfReplyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isEditBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (selfReplyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isEditBox': true,\r\n                        'boxText': ''\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setSelfEdit(toApply)\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificSelfReply = useCallback((postID, event) => {\r\n        for (let edit in selfEdit) {\r\n            let currentEdit = selfEdit[edit];\r\n            if (currentEdit.postID === postID) {\r\n                currentEdit.boxText = event.target.value;\r\n                console.log(currentEdit.boxText);\r\n            }\r\n        }\r\n    }, [selfEdit])\r\n\r\n    const submitEdit = useCallback(async (postID) => {\r\n        let editObj;\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let edit in selfEdit) {\r\n            let currentEdit = selfEdit[edit]\r\n            if (currentEdit.postID === postID) {\r\n                editObj = {\r\n                    'body': currentEdit.boxText,\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch(`http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/posts/update/${postID}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(editObj)\r\n        })\r\n\r\n        if (response.status === 202) {\r\n            console.log('Update successful!')\r\n            let newEditBoxList = []\r\n            for (let edit in selfEdit) {\r\n                let currentEdit = selfEdit[edit]\r\n                if (currentEdit.postID == postID) {\r\n                    currentEdit.isEditBox = false\r\n                }\r\n                newEditBoxList.push(currentEdit)\r\n            }\r\n            reloadPosts()\r\n        } else {\r\n            console.log('Update failed!');\r\n        }\r\n    }, [selfEdit])\r\n\r\n    const deletePost = useCallback(async (postID) => {\r\n            let response = await fetch(`http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/posts/delete/${postID}`, {\r\n                method: 'DELETE',\r\n            })\r\n            if (response.status === 204) {\r\n                console.log('Delete successful')\r\n                reloadPosts()\r\n            } else {\r\n                console.log('Delete unsuccessful')\r\n            }\r\n        }\r\n        , [])\r\n\r\n    const changeReplyBox = useCallback((replyToChange) => {\r\n        const toApply = [];\r\n        if (!replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setReplyBox(toApply);\r\n        } else if (replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (replyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (replyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': true,\r\n                        'boxText': '',\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setReplyBox(toApply);\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificReplyBox = useCallback((postID, event) => {\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                currentReply.boxText = event.target.value;\r\n                console.log(currentReply.boxText);\r\n            }\r\n        }\r\n    }, [replyBox])\r\n\r\n    const submitReply = useCallback(async (postID) => {\r\n        let replyObj = {};\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                replyObj = {\r\n                    'body': currentReply.boxText,\r\n                    'visibility': true,\r\n                    'user': {\r\n                        'id': userID\r\n                    },\r\n                    'parent': {\r\n                        'id': postID\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(replyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Reply successful')\r\n            let newReplyBoxList = [];\r\n            for (let replyBoxObj in replyBox) {\r\n                let currentReply = replyBox[replyBoxObj];\r\n                if (currentReply.postID == postID) {\r\n                    currentReply.isBox = false\r\n                }\r\n                newReplyBoxList.push(currentReply)\r\n            }\r\n            setReplyBox(newReplyBoxList)\r\n            reloadPosts()\r\n        } else {\r\n            console.log('Reply failed')\r\n        }\r\n    }, [replyBox])\r\n\r\n    const makePostElement = useCallback(async () => {\r\n\r\n        const auth = sessionStorage.getItem('auth-roar');\r\n        const userID = await getUserID(auth);\r\n\r\n        const newElementArray = [];\r\n\r\n        let ignore = [];\r\n\r\n        const getPost = (ID) => {\r\n            for (let post in currentPostDictionary) {\r\n                if (currentPostDictionary[post].postID === ID) {\r\n                    return {\r\n                        'postID': currentPostDictionary[post].postID,\r\n                        'name': currentPostDictionary[post].name,\r\n                        'body': currentPostDictionary[post].body\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let maxLevel = 0;\r\n\r\n        const getMaxLevel = () => {\r\n            currentPostDictionary.forEach((post) => {\r\n                let a = 0;\r\n                let b = post.postID;\r\n                if (b > a) {\r\n                    maxLevel = b;\r\n                }\r\n                a = b;\r\n            })\r\n        }\r\n\r\n        getMaxLevel();\r\n\r\n        // const removePosts = (posts) => {\r\n        //     // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n        //     //     if (posts.includes(post.postID)) {\r\n        //     //         setCurrentPostDictionary(currentPostDictionary.splice(index, 1));\r\n        //     //     }\r\n        //     // })\r\n        //     for (let post in currentPostDictionary) {\r\n        //         let thisPost = currentPostDictionary[post];\r\n        //         if (posts.includes(thisPost.postID)) {\r\n        //             setCurrentPostDictionary(currentPostDictionary.splice(post, 1));\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        const constructChildren = (children, parentID) => {\r\n            let postsToIgnore = [];\r\n            for (let child in children) {\r\n                let currentChild = children[child];\r\n                if (currentChild.pID === parentID) {\r\n                    let match = getPost(currentChild.cID);\r\n                    match.level = currentChild.level;\r\n                    let selfEditObj = {};\r\n                    selfEdit.forEach((editObj) => {\r\n                        if (match.postID === editObj.postID) {\r\n                            selfEditObj = editObj;\r\n                        }\r\n                    })\r\n                    let replyPropObj = {};\r\n                    replyBox.forEach((replyProp) => {\r\n                        if (match.postID === replyProp.postID) {\r\n                            replyPropObj = replyProp;\r\n                        }\r\n                    })\r\n                    if (currentChild.uID == userID) {\r\n                        newElementArray.push(<Reply post={match} key={currentChild.cID}\r\n                                                    selfEditBoxProps={selfEditObj} editBoxFunc={changeSelfReplyBox}\r\n                                                    setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                    submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                    editButtons={true} replyBoxProps={replyPropObj}\r\n                                                    replyBoxFunc={changeReplyBox}\r\n                                                    setReplyBoxText={changeSpecificReplyBox}\r\n                                                    submitReplyFunc={submitReply}/>);\r\n                    } else {\r\n                        newElementArray.push(<Reply post={match} key={currentChild.cID}\r\n                                                    selfEditBoxProps={selfEditObj} editBoxFunc={changeSelfReplyBox}\r\n                                                    setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                    submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                    editButtons={false} replyBoxProps={replyPropObj}\r\n                                                    replyBoxFunc={changeReplyBox}\r\n                                                    setReplyBoxText={changeSpecificReplyBox}\r\n                                                    submitReplyFunc={submitReply}/>);\r\n                    }\r\n\r\n                    postsToIgnore.push(currentChild.cID);\r\n                }\r\n            }\r\n            return postsToIgnore;\r\n        }\r\n\r\n\r\n        const constructPostDictionary = () => {\r\n            // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n            //     let fp = getPost(post.postID);\r\n            //     let replyPropObj = {};\r\n            //     replyBox.forEach((replyProp) => {\r\n            //         if (fp.postID === replyProp.postID) {\r\n            //             replyPropObj = replyProp;\r\n            //         }\r\n            //     })\r\n            //     newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n            //                             replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n            //                             submitReplyFunc={submitReply}/>);\r\n            //     let initialParentID = post.postID;\r\n            //     while (initialParentID <= maxLevel) {\r\n            //         constructChildren(post.childrenID, initialParentID);\r\n            //         initialParentID += 1;\r\n            //     }\r\n            // })\r\n            for (let post in currentPostDictionary) {\r\n                let thisPost = currentPostDictionary[post];\r\n                if (!ignore.includes(thisPost.postID)) {\r\n                    let fp = getPost(thisPost.postID);\r\n                    let replyPropObj = {};\r\n                    replyBox.forEach((replyProp) => {\r\n                        if (fp.postID === replyProp.postID) {\r\n                            replyPropObj = replyProp;\r\n                        }\r\n                    })\r\n                    let selfEditObj = {};\r\n                    selfEdit.forEach((editObj) => {\r\n                        if (fp.postID === editObj.postID) {\r\n                            selfEditObj = editObj;\r\n                        }\r\n                    })\r\n                    if (userID == thisPost.userID) {\r\n                        newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n                                                   replyBoxFunc={changeReplyBox}\r\n                                                   setReplyBoxText={changeSpecificReplyBox}\r\n                                                   submitReplyFunc={submitReply} selfEditBoxProps={selfEditObj}\r\n                                                   editBoxFunc={changeSelfReplyBox}\r\n                                                   setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                   submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                   editButtons={true}/>);\r\n                    } else {\r\n                        newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n                                                   replyBoxFunc={changeReplyBox}\r\n                                                   setReplyBoxText={changeSpecificReplyBox}\r\n                                                   submitReplyFunc={submitReply} selfEditBoxProps={selfEditObj}\r\n                                                   editBoxFunc={changeSelfReplyBox}\r\n                                                   setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                   submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                   editButtons={false}/>);\r\n                    }\r\n                    let initialParentID = thisPost.postID;\r\n                    while (initialParentID <= maxLevel) {\r\n                        ignore = ignore.concat(constructChildren(thisPost.childrenID, initialParentID));\r\n                        initialParentID += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        constructPostDictionary();\r\n\r\n        setElementArray(newElementArray);\r\n\r\n    }, [changeReplyBox, changeSpecificReplyBox, postDictionary, replyBox, submitReply, changeSelfReplyBox,\r\n        changeSpecificSelfReply, selfEdit])\r\n\r\n    useEffect(() => {\r\n        pushPostDictionaryChanges()\r\n    }, [pushPostDictionaryChanges])\r\n\r\n    useEffect(() => {\r\n        changeReplyBox()\r\n    }, [changeReplyBox])\r\n\r\n    useEffect(() => {\r\n        changeSelfReplyBox()\r\n    }, [changeSelfReplyBox])\r\n\r\n    useEffect(() => {\r\n        makePostElement()\r\n    }, [makePostElement])\r\n\r\n    // const makePostElement = () => {\r\n    //\r\n    //     const getPost = (ID) => {\r\n    //         for (let post in postDictionary) {\r\n    //             if (postDictionary[post].postID === ID) {\r\n    //                 return {\r\n    //                     'postID': postDictionary[post].postID,\r\n    //                     'name': postDictionary[post].name,\r\n    //                     'body': postDictionary[post].body\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     let maxLevel = 0;\r\n    //\r\n    //     const getMaxLevel = () => {\r\n    //         postDictionary.forEach((post) => {\r\n    //             let a = 0;\r\n    //             let b = post.postID;\r\n    //             if (b > a) {\r\n    //                 maxLevel = b;\r\n    //             }\r\n    //             a = b;\r\n    //         })\r\n    //     }\r\n    //\r\n    //     getMaxLevel();\r\n    //\r\n    //     const removePosts = (posts) => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             if (posts.includes(post.postID)) {\r\n    //                 postDictionary.splice(index, 1);\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //\r\n    //     const constructChildren = (children, parentID) => {\r\n    //         let postsToRemove = [];\r\n    //         children.forEach((replyObj) => {\r\n    //             if (replyObj.pID === parentID) {\r\n    //                 let match = getPost(replyObj.cID);\r\n    //                 match.level = replyObj.level;\r\n    //                 elementArray.push(<Reply post={match} key={replyObj.cID}/>);\r\n    //                 postsToRemove.push(replyObj.cID);\r\n    //             }\r\n    //         })\r\n    //         removePosts(postsToRemove);\r\n    //     }\r\n    //\r\n    //\r\n    //     const constructPostDictionary = () => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             let fp = getPost(post.postID);\r\n    //             let replyPropObj = {};\r\n    //             replyBox.forEach((replyProp) => {\r\n    //                 if (fp.postID === replyProp.postID) {\r\n    //                     replyPropObj = replyProp;\r\n    //                 }\r\n    //             })\r\n    //             elementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n    //                                     replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n    //             submitReplyFunc={submitReply}/>);\r\n    //             let initialParentID = post.postID;\r\n    //             while (initialParentID <= maxLevel) {\r\n    //                 constructChildren(post.childrenID, initialParentID);\r\n    //                 initialParentID += 1;\r\n    //             }\r\n    //             // postDictionary.splice(index, 1);\r\n    //         })\r\n    //     }\r\n    //\r\n    //     constructPostDictionary();\r\n    //\r\n    //     return elementArray;\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {elementArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsTable;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LogoutButton =(props)=>{\r\n    const {setLogoutFunc, style} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={()=>(setLogoutFunc(false), sessionStorage.setItem('auth-roar', ''))}\r\n        className={'rounded-pill'}>Logout</Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst MakePost =(props)=>{\r\n\r\n    const {setPostText, submitPostFunc} = props;\r\n\r\n    return (\r\n        <div className={'my-2'}>\r\n            <h3 className={'title'}>Speak Your Mind</h3>\r\n            <textarea className={'form-control'} rows={3} id={'post-box'}\r\n            onChange={event => {setPostText(event)}}/>\r\n            <Button variant={'secondary'} onClick={(event)=>{submitPostFunc();\r\n            setPostText(event)}}\r\n            className={'form-control'}>Submit Post</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MakePost;","import {useCallback, useEffect, useState} from \"react\";\r\nimport Title from \"../components/Title\";\r\nimport Searchbar from \"../components/Searchbar\";\r\nimport constructPostDictionary from \"../functions/constructPostDictionary\";\r\nimport PostsTable from \"../components/PostsTable\";\r\nimport LogoutButton from \"../components/LogoutButton\";\r\nimport MakePost from \"../components/MakePost\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst Homepage = (props) => {\r\n\r\n    const {setLogoutFunc} = props;\r\n\r\n    const [allUsers, setAllUsers] = useState([]);\r\n    const [postDictionary, setPostDictionary] = useState([]);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [postText, setPostText] = useState('');\r\n\r\n    const getAllUsers = useCallback(async () => {\r\n        if (!allUsers.length) {\r\n            let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/read');\r\n            let allUsers = await response.json();\r\n            setAllUsers(allUsers);\r\n        }\r\n    }, [allUsers]);\r\n\r\n    const constructAllPosts = useCallback(() => {\r\n        let newPostDictionary = constructPostDictionary(allUsers);\r\n        if (newPostDictionary.length) {\r\n            setPostDictionary(newPostDictionary);\r\n        } else {\r\n            setPostDictionary([]);\r\n        }\r\n    }, [allUsers]);\r\n\r\n    const constructPage = useCallback(() => {\r\n        getAllUsers();\r\n        constructAllPosts();\r\n    }, [constructAllPosts, getAllUsers]);\r\n\r\n    const submitPost = useCallback(async () => {\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        let postObj = {\r\n            'body': postText,\r\n            'visibility': true,\r\n            'user': {\r\n                'id': userID\r\n            }\r\n        }\r\n        let postResponse = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(postObj)\r\n        })\r\n\r\n        if (postResponse.status === 201) {\r\n            let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/read');\r\n            let allUsers = await response.json();\r\n            setAllUsers(allUsers);\r\n            console.log('Post successful')\r\n            // Method for just adding the post to the page instead of doing a reload\r\n            // not currently working\r\n            // let post = await postResponse.json()\r\n            // let postDictionaryItem = await constructOnePost(post);\r\n            // let newPostDictionary = postDictionary\r\n            // newPostDictionary.push(postDictionaryItem)\r\n            // setPostDictionary(newPostDictionary);\r\n        } else {\r\n            console.log('Post unsuccessful')\r\n        }\r\n    }, [postText])\r\n\r\n    const handleInputText = (event) => {\r\n        setSearchText(event.target.value);\r\n    }\r\n\r\n    const handlePostText = (event) => {\r\n        if (event.type === 'click') {\r\n            setPostText('');\r\n        } else {\r\n            setPostText(event.target.value);\r\n        }\r\n    }\r\n\r\n    const resetAllUsers = async () => {\r\n        let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/read');\r\n        let allUsers = await response.json();\r\n        setAllUsers(allUsers);\r\n    }\r\n\r\n    const constructSearch = () => {\r\n        const searchedPosts = []\r\n        if (searchText === '') {\r\n            constructPage();\r\n        }\r\n        postDictionary.forEach((post) => {\r\n            if (post.body.toLowerCase().includes(searchText.toLowerCase())) {\r\n                searchedPosts.push(post)\r\n            }\r\n        })\r\n        setPostDictionary(searchedPosts)\r\n    }\r\n\r\n    useEffect(() => {\r\n        constructPage();\r\n    }, [constructPage])\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <div className={'row'}>\r\n                <Title/>\r\n                <LogoutButton setLogoutFunc={setLogoutFunc}/>\r\n                <MakePost setPostText={handlePostText} submitPostFunc={submitPost}/>\r\n            </div>\r\n            <div className={'row'}>\r\n                <Searchbar userInputFunc={handleInputText} searchFunc={constructSearch}/>\r\n                <PostsTable postDictionary={postDictionary} reloadPosts={resetAllUsers}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","const LoginInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'text'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Username'}/>\r\n    )\r\n}\r\n\r\nexport default LoginInput;","const PasswordInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'password'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Password'}/>\r\n    )\r\n}\r\n\r\nexport default PasswordInput;","const LoginTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Login</h3>\r\n    )\r\n}\r\n\r\nexport default LoginTitle;","import {Button} from \"react-bootstrap\";\r\n\r\nconst RegisterButton = (props) => {\r\n    const {redirectFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (redirectFunc())}\r\n                className={'rounded-pill form-control my-1'}>Register</Button>\r\n    )\r\n}\r\n\r\nexport default RegisterButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LoginButton = (props) => {\r\n    const {loginFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (loginFunc())}\r\n                className={'rounded-pill form-control'}>Login</Button>\r\n    )\r\n}\r\n\r\nexport default LoginButton;","const RegisterTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Register</h3>\r\n    )\r\n}\r\n\r\nexport default RegisterTitle;","const FormInput =(props)=>{\r\n    const {inputFunc, type, placeholder} = props;\r\n    return (\r\n        <input type={type} onChange={event => inputFunc(event)}\r\n        className={'form-control rounded-pill my-1'} placeholder={placeholder}/>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import {useCallback, useState} from \"react\";\r\nimport RegisterTitle from \"../components/RegisterTitle\";\r\nimport FormInput from \"../components/FormInput\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nconst Register = (props) => {\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const inputUsername = (event) => {\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const inputEmail = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const loginFunc = useCallback(async () => {\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'username': username,\r\n                'password': password\r\n            }\r\n        });\r\n        let auth_key = await response.text();\r\n        if (auth_key !== 'INVALID') {\r\n            sessionStorage.setItem('auth-roar', auth_key);\r\n            console.log('Successfully logged in');\r\n            setLoginFunc(true);\r\n        } else {\r\n            console.log('Unsuccessful attempt');\r\n        }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const submitUserData = async () => {\r\n\r\n        let bodyObj = {\r\n            'username': username,\r\n            'name': name,\r\n            'email': email,\r\n            'password': password\r\n        }\r\n\r\n        let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(bodyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Successfully created');\r\n            await loginFunc();\r\n        } else {\r\n            console.log('Unsuccessful!')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <RegisterTitle/>\r\n            <FormInput inputFunc={inputUsername} type={'text'} placeholder={'Username'}/>\r\n            <FormInput inputFunc={inputName} type={'text'} placeholder={'Name'}/>\r\n            <FormInput inputFunc={inputEmail} type={'email'} placeholder={'Email'}/>\r\n            <FormInput inputFunc={inputPassword} type={'password'} placeholder={'Password'}/>\r\n            <Button variant={'secondary'} onClick={() => {\r\n                submitUserData()\r\n            }} className={'rounded-pill form-control'}>Submit</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import {useCallback, useEffect, useState} from \"react\";\r\nimport LoginInput from \"../components/LoginInput\";\r\nimport PasswordInput from \"../components/PasswordInput\";\r\nimport LoginTitle from \"../components/LoginTitle\";\r\nimport RegisterButton from \"../components/RegisterButton\";\r\nimport LoginButton from \"../components/LoginButton\";\r\nimport Register from \"./Register\";\r\n\r\nconst LoginRegister =(props)=>{\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [register, setRegister] = useState(false);\r\n\r\n    const inputUsername = (event) =>{\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event)=>{\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const registerRedirectFunc =()=>{\r\n        setRegister(true);\r\n    }\r\n    \r\n    const loginFunc = useCallback(async()=>{\r\n            console.log(`username: ${username}, password: ${password}`)\r\n            let response = await fetch('http://roar-env.eba-hb5rpyxz.eu-west-2.elasticbeanstalk.com/users/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'username': username,\r\n                    'password': password\r\n                }\r\n            });\r\n            let auth_key = await response.text();\r\n            if (auth_key !== 'INVALID') {\r\n                sessionStorage.setItem('auth-roar', auth_key);\r\n                console.log('Successfully logged in');\r\n                setLoginFunc(true);\r\n            } else {\r\n                console.log('Unsuccessful attempt');\r\n            }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const constructPage = useCallback(()=>{\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        if (!register) {\r\n            return (\r\n                <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n                    <LoginTitle/>\r\n                    <LoginInput inputFunc={inputUsername} defaultValue={username}/>\r\n                    <PasswordInput inputFunc={inputPassword} defaultValue={password}/>\r\n                    <LoginButton loginFunc={loginFunc}/>\r\n                    <div className={'separator post-text'}>Or</div>\r\n                    <RegisterButton redirectFunc={registerRedirectFunc}/>\r\n                </div>\r\n            )\r\n        } else if (register) {\r\n            return (\r\n                <Register setLoginFunc={setLoginFunc}/>\r\n            )\r\n        }\r\n    }, [loginFunc, password, register, setLoginFunc, username])\r\n\r\n    return (\r\n        <div>\r\n            {constructPage()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginRegister;","import './css/bootstrap.css';\r\nimport './css/roar.css'\r\nimport './css/fonts.css';\r\nimport Homepage from \"./pages/Homepage\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport LoginRegister from \"./pages/LoginRegister\";\r\n\r\nconst App = () => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    const [page, setPage] = useState([]);\r\n\r\n    const checkLoggedIn = useCallback(()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        if (auth && (auth !== 'INVALID')) {\r\n            setLoggedIn(true);\r\n        } else {\r\n            setLoggedIn(false);\r\n        }\r\n    }, [])\r\n\r\n    const getPageToDisplay = useCallback(()=>{\r\n        if (loggedIn) {\r\n            setPage([<Homepage setLogoutFunc={setLoggedIn}/>]);\r\n        } else {\r\n            setPage([<LoginRegister setLoginFunc={setLoggedIn}/>]);\r\n        }\r\n    }, [loggedIn])\r\n\r\n    useEffect(()=>{\r\n        checkLoggedIn();\r\n        getPageToDisplay();\r\n    }, [checkLoggedIn, getPageToDisplay])\r\n    return (\r\n        <div>\r\n            {page}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}