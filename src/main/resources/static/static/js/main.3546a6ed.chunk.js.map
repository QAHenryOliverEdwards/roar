{"version":3,"sources":["coponents/Title.js","coponents/Searchbar.js","functions/constructPostDictionary.js","coponents/Post.js","coponents/Reply.js","functions/getUserID.js","coponents/PostsTable.js","coponents/LogoutButton.js","coponents/MakePost.js","pages/Homepage.js","coponents/LoginInput.js","coponents/PasswordInput.js","coponents/LoginTitle.js","coponents/RegisterButton.js","coponents/LoginButton.js","coponents/RegisterTitle.js","coponents/FormInput.js","pages/Register.js","pages/LoginRegister.js","App.js","index.js"],"names":["Title","props","style","className","Searchbar","userInputFunc","searchFunc","InputGroup","type","onChange","event","Button","variant","onClick","findUserIDWithPostID","postID","userList","user","currentUser","post","id","constructPostDictionary","allUsers","postDictionaryList","forEach","posts","postItem","name","body","searchChildren3","parent","children","recursionLevel","Array","isArray","length","child","console","log","childUserID","childrenID","push","pID","cID","uID","level","Post","replyBoxProps","replyBoxFunc","setReplyBoxText","submitReplyFunc","selfEditBoxProps","editBoxFunc","setSelfEditBoxText","submitEditFunc","deleteFunc","editButtons","isBox","isEditBox","Card","Text","rows","Reply","getUserID","auth","a","fetch","headers","response","text","PostsTable","postDictionary","useState","elementArray","setElementArray","replyBox","setReplyBox","currentPostDictionary","setCurrentPostDictionary","selfEdit","setSelfEdit","pushPostDictionaryChanges","useCallback","changeSelfReplyBox","selfReplyToChange","toApply","currentPost","thisReply","changeSpecificSelfReply","edit","currentEdit","boxText","target","value","submitEdit","sessionStorage","getItem","editObj","method","JSON","stringify","status","deletePost","changeReplyBox","replyToChange","changeSpecificReplyBox","reply","currentReply","submitReply","userID","replyObj","makePostElement","newElementArray","ignore","getPost","ID","maxLevel","b","getMaxLevel","constructChildren","parentID","postsToIgnore","currentChild","match","selfEditObj","replyPropObj","replyProp","thisPost","includes","fp","initialParentID","concat","useEffect","LogoutButton","setLogoutFunc","setItem","MakePost","setPostText","submitPostFunc","Homepage","setAllUsers","setPostDictionary","searchText","setSearchText","postText","getAllUsers","json","constructAllPosts","newPostDictionary","constructPage","submitPost","postObj","searchedPosts","toLowerCase","LoginInput","inputFunc","placeholder","PasswordInput","LoginTitle","RegisterButton","redirectFunc","LoginButton","loginFunc","RegisterTitle","FormInput","Register","setLoginFunc","username","setUsername","setName","email","setEmail","password","setPassword","auth_key","submitUserData","bodyObj","LoginRegister","register","setRegister","inputUsername","inputPassword","registerRedirectFunc","defaultValue","App","loggedIn","setLoggedIn","page","setPage","checkLoggedIn","getPageToDisplay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3546a6ed.chunk.js","sourcesContent":["const Title =(props)=>{\r\n    const {style} = props;\r\n    return (\r\n        <h1 className={'title'} style={style}>Welcome to Roar</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import {InputGroup, Button} from \"react-bootstrap\";\r\n\r\nconst Searchbar = (props) => {\r\n    const {userInputFunc, searchFunc} = props;\r\n    return (\r\n        <InputGroup className={'my-3'}>\r\n            <input type={'search'} onChange={(event) => (userInputFunc(event))} className={'form-control'}/>\r\n            <Button variant={'secondary'} onClick={()=>(searchFunc())}>Search</Button>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","const constructPostDictionary = (allUsers) => {\r\n    const postDictionaryList = [];\r\n    allUsers.forEach((user) => {\r\n        user.posts.forEach((post) => {\r\n            let postItem = {\r\n                'userID': user.id,\r\n                'postID': post.id,\r\n                'name': user.name,\r\n                'body': post.body,\r\n                'childrenID': []\r\n            }\r\n            const searchChildren3 = (parent, children, recursionLevel) => {\r\n                if (Array.isArray(children) && (children.length !== 0)) {\r\n                    recursionLevel += 1;\r\n                    children.forEach((child) => {\r\n                        console.log(child)\r\n                        let childUserID = findUserIDWithPostID(child.id, allUsers)\r\n                        postItem.childrenID.push({\r\n                            pID: parent.id,\r\n                            cID: child.id,\r\n                            uID: childUserID,\r\n                            level: recursionLevel\r\n                        });\r\n                        return searchChildren3(child, child.children, recursionLevel);\r\n                    })\r\n                } else {\r\n                    return postItem;\r\n                }\r\n            }\r\n            searchChildren3(post, post.children, 0);\r\n            postDictionaryList.push(postItem);\r\n        })\r\n    })\r\n    return postDictionaryList;\r\n}\r\n\r\nconst findUserIDWithPostID = (postID, userList) => {\r\n    for (let user in userList) {\r\n        let currentUser = userList[user]\r\n        for (let post in userList[user]['posts']) {\r\n            let currentPost = userList[user]['posts'][post]\r\n            if (currentPost.id === postID) {\r\n                return currentUser.id\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default constructPostDictionary;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Post = (props) => {\r\n\r\n    let {\r\n        post, replyBoxProps, replyBoxFunc,\r\n        setReplyBoxText, submitReplyFunc, selfEditBoxProps,\r\n        editBoxFunc, setSelfEditBoxText, submitEditFunc,\r\n        deleteFunc, editButtons\r\n    } = props;\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <Card className={'dark-green-bg'}>\r\n    //             <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n    //             <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n    //             <Button variant={'link'} onClick={()=>{replyBoxFunc(replyBoxProps.postID)}}\r\n    //                     className={'button-as-link px-0'}>Reply</Button>\r\n    //         </Card>\r\n    //     </div>\r\n    // )\r\n\r\n    if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === false && editButtons === true) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-10'}>{post.name}</Card.Title>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        editBoxFunc(selfEditBoxProps.postID)\r\n                                    }}\r\n                            >{'\\u270F'}</Button>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        deleteFunc(post.postID)\r\n                                    }}\r\n                            >{'\\u{1F5D1}'}</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }}\r\n                            className={'button-as-link px-0'}>Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === false && editButtons === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-12'}>{post.name}</Card.Title>\r\n                            {/*<Button variant={'link'}*/}\r\n                            {/*        className={'col-1 justify-content-end card-title button-no-decoration'}*/}\r\n                            {/*        onClick={() => {*/}\r\n                            {/*            editBoxFunc(selfEditBoxProps.postID)*/}\r\n                            {/*        }}*/}\r\n                            {/*>{'\\u270F'}</Button>*/}\r\n                            {/*<Button variant={'link'}*/}\r\n                            {/*        className={'col-1 justify-content-end card-title button-no-decoration'}*/}\r\n                            {/*        onClick={() => {*/}\r\n                            {/*            deleteFunc(post.postID)*/}\r\n                            {/*        }}*/}\r\n                            {/*>{'\\u{1F5D1}'}</Button>*/}\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }}\r\n                            className={'button-as-link px-0'}>Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === true) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setSelfEditBoxText(selfEditBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitEditFunc(selfEditBoxProps.postID)\r\n                    }}>\r\n                        Finish Edit!\r\n                    </Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setReplyBoxText(replyBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitReplyFunc(replyBoxProps.postID)\r\n                    }}\r\n                    >Submit Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Reply = (props) => {\r\n\r\n    const {\r\n        post, selfEditBoxProps, editBoxFunc,\r\n        setSelfEditBoxText, submitEditFunc,\r\n        deleteFunc, editButtons, replyBoxProps,\r\n        replyBoxFunc, setReplyBoxText, submitReplyFunc\r\n    } = props;\r\n\r\n    if (selfEditBoxProps.isEditBox === false && editButtons === true && replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-10'}>{post.name}</Card.Title>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        editBoxFunc(selfEditBoxProps.postID)\r\n                                    }}\r\n                            >{'\\u270F'}</Button>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        deleteFunc(post.postID)\r\n                                    }}>{'\\u{1F5D1}'}</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }} className={'button-as-link px-0'}>Reply</Button>\r\n                    <Card.Text className={'post-text'}>At reply level {post.level}</Card.Text>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (selfEditBoxProps.isEditBox === false && editButtons === false && replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-12'}>{post.name}</Card.Title>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxProps(replyBoxProps.postID)\r\n                    }} className={'button-as-link px-0'}>Reply</Button>\r\n                    <Card.Text className={'post-text'}>At reply level {post.level}</Card.Text>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (selfEditBoxProps.isEditBox === true && replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setSelfEditBoxText(selfEditBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitEditFunc(selfEditBoxProps.postID)\r\n                    }}>\r\n                        Finish Edit!\r\n                    </Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event)=>{\r\n                        setReplyBoxText(replyBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitReplyFunc(replyBoxProps.postID)\r\n                    }}\r\n                    >Submit Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Reply;","const getUserID = async (auth)=>{\r\n    let response = await fetch('http://127.0.0.1:8082/users/getID', {\r\n        headers: {\r\n            'token': auth\r\n        }\r\n    })\r\n    return await response.text();\r\n}\r\n\r\nexport default getUserID;","import Post from \"./Post\";\r\nimport Reply from \"./Reply\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst PostsTable = (props) => {\r\n\r\n    const {postDictionary} = props;\r\n\r\n    const [elementArray, setElementArray] = useState([]);\r\n    const [replyBox, setReplyBox] = useState([]);\r\n    const [currentPostDictionary, setCurrentPostDictionary] = useState([]);\r\n    const [selfEdit, setSelfEdit] = useState([]);\r\n\r\n    const pushPostDictionaryChanges = useCallback(() => {\r\n        setCurrentPostDictionary(postDictionary)\r\n    }, [postDictionary])\r\n\r\n    const changeSelfReplyBox = useCallback((selfReplyToChange) => {\r\n        const toApply = [];\r\n        if (!selfReplyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isEditBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setSelfEdit(toApply);\r\n        } else if (selfReplyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (selfReplyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isEditBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (selfReplyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isEditBox': true,\r\n                        'boxText': ''\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setSelfEdit(toApply)\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificSelfReply = useCallback((postID, event) => {\r\n        for (let edit in selfEdit) {\r\n            let currentEdit = selfEdit[edit];\r\n            if (currentEdit.postID === postID) {\r\n                currentEdit.boxText = event.target.value;\r\n                console.log(currentEdit.boxText);\r\n            }\r\n        }\r\n    }, [selfEdit])\r\n\r\n    const submitEdit = useCallback(async (postID) => {\r\n        let editObj;\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let edit in selfEdit) {\r\n            let currentEdit = selfEdit[edit]\r\n            if (currentEdit.postID === postID) {\r\n                editObj = {\r\n                    'body': currentEdit.boxText,\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch(`http://127.0.0.1:8082/posts/update/${postID}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(editObj)\r\n        })\r\n\r\n        if (response.status === 202) {\r\n            console.log('Update successful!')\r\n        } else {\r\n            console.log('Update failed!');\r\n        }\r\n    }, [selfEdit])\r\n\r\n    const deletePost = useCallback(async (postID) => {\r\n            let response = await fetch(`http://127.0.0.1:8082/posts/delete/${postID}`, {\r\n                method: 'DELETE',\r\n            })\r\n            if (response.status === 204) {\r\n                console.log('Delete successful')\r\n            } else {\r\n                console.log('Delete unsuccessful')\r\n            }\r\n        }\r\n        , [])\r\n\r\n    const changeReplyBox = useCallback((replyToChange) => {\r\n        const toApply = [];\r\n        if (!replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setReplyBox(toApply);\r\n        } else if (replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (replyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (replyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': true,\r\n                        'boxText': '',\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setReplyBox(toApply);\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificReplyBox = useCallback((postID, event) => {\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                currentReply.boxText = event.target.value;\r\n                console.log(currentReply.boxText);\r\n            }\r\n        }\r\n    }, [replyBox])\r\n\r\n    const submitReply = useCallback(async (postID) => {\r\n        let replyObj;\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                replyObj = {\r\n                    'body': currentReply.boxText,\r\n                    'visibility': true,\r\n                    'user': {\r\n                        'id': userID\r\n                    },\r\n                    'parent': {\r\n                        'id': postID\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch('http://127.0.0.1:8082/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(replyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Reply successful')\r\n        } else {\r\n            console.log('Reply failed')\r\n        }\r\n    }, [replyBox])\r\n\r\n    const makePostElement = useCallback(async () => {\r\n\r\n        const auth = sessionStorage.getItem('auth-roar');\r\n        const userID = await getUserID(auth);\r\n\r\n        const newElementArray = [];\r\n\r\n        let ignore = [];\r\n\r\n        const getPost = (ID) => {\r\n            for (let post in currentPostDictionary) {\r\n                if (currentPostDictionary[post].postID === ID) {\r\n                    return {\r\n                        'postID': currentPostDictionary[post].postID,\r\n                        'name': currentPostDictionary[post].name,\r\n                        'body': currentPostDictionary[post].body\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let maxLevel = 0;\r\n\r\n        const getMaxLevel = () => {\r\n            currentPostDictionary.forEach((post) => {\r\n                let a = 0;\r\n                let b = post.postID;\r\n                if (b > a) {\r\n                    maxLevel = b;\r\n                }\r\n                a = b;\r\n            })\r\n        }\r\n\r\n        getMaxLevel();\r\n\r\n        // const removePosts = (posts) => {\r\n        //     // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n        //     //     if (posts.includes(post.postID)) {\r\n        //     //         setCurrentPostDictionary(currentPostDictionary.splice(index, 1));\r\n        //     //     }\r\n        //     // })\r\n        //     for (let post in currentPostDictionary) {\r\n        //         let thisPost = currentPostDictionary[post];\r\n        //         if (posts.includes(thisPost.postID)) {\r\n        //             setCurrentPostDictionary(currentPostDictionary.splice(post, 1));\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        const constructChildren = (children, parentID) => {\r\n            let postsToIgnore = [];\r\n            for (let child in children) {\r\n                let currentChild = children[child];\r\n                if (currentChild.pID === parentID) {\r\n                    let match = getPost(currentChild.cID);\r\n                    match.level = currentChild.level;\r\n                    let selfEditObj = {};\r\n                    selfEdit.forEach((editObj) => {\r\n                        if (match.postID === editObj.postID) {\r\n                            selfEditObj = editObj;\r\n                        }\r\n                    })\r\n                    let replyPropObj = {};\r\n                    replyBox.forEach((replyProp) => {\r\n                        if (match.postID === replyProp.postID) {\r\n                            replyPropObj = replyProp;\r\n                        }\r\n                    })\r\n                    if (currentChild.uID == userID) {\r\n                        newElementArray.push(<Reply post={match} key={currentChild.cID}\r\n                                                    selfEditBoxProps={selfEditObj} editBoxFunc={changeSelfReplyBox}\r\n                                                    setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                    submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                    editButtons={true} replyBoxProps={replyPropObj}\r\n                                                    replyBoxFunc={changeReplyBox}\r\n                                                    setReplyBoxText={changeSpecificReplyBox}\r\n                                                    submitReplyFunc={submitReply}/>);\r\n                    } else {\r\n                        newElementArray.push(<Reply post={match} key={currentChild.cID}\r\n                                                    selfEditBoxProps={selfEditObj} editBoxFunc={changeSelfReplyBox}\r\n                                                    setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                    submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                    editButtons={false} replyBoxProps={replyPropObj}\r\n                                                    replyBoxFunc={changeReplyBox}\r\n                                                    setReplyBoxText={changeSpecificReplyBox}\r\n                                                    submitReplyFunc={submitReply}/>);\r\n                    }\r\n\r\n                    postsToIgnore.push(currentChild.cID);\r\n                }\r\n            }\r\n            return postsToIgnore;\r\n        }\r\n\r\n\r\n        const constructPostDictionary = () => {\r\n            // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n            //     let fp = getPost(post.postID);\r\n            //     let replyPropObj = {};\r\n            //     replyBox.forEach((replyProp) => {\r\n            //         if (fp.postID === replyProp.postID) {\r\n            //             replyPropObj = replyProp;\r\n            //         }\r\n            //     })\r\n            //     newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n            //                             replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n            //                             submitReplyFunc={submitReply}/>);\r\n            //     let initialParentID = post.postID;\r\n            //     while (initialParentID <= maxLevel) {\r\n            //         constructChildren(post.childrenID, initialParentID);\r\n            //         initialParentID += 1;\r\n            //     }\r\n            // })\r\n            for (let post in currentPostDictionary) {\r\n                let thisPost = currentPostDictionary[post];\r\n                if (!ignore.includes(thisPost.postID)) {\r\n                    let fp = getPost(thisPost.postID);\r\n                    let replyPropObj = {};\r\n                    replyBox.forEach((replyProp) => {\r\n                        if (fp.postID === replyProp.postID) {\r\n                            replyPropObj = replyProp;\r\n                        }\r\n                    })\r\n                    let selfEditObj = {};\r\n                    selfEdit.forEach((editObj) => {\r\n                        if (fp.postID === editObj.postID) {\r\n                            selfEditObj = editObj;\r\n                        }\r\n                    })\r\n                    if (userID == thisPost.userID) {\r\n                        newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n                                                   replyBoxFunc={changeReplyBox}\r\n                                                   setReplyBoxText={changeSpecificReplyBox}\r\n                                                   submitReplyFunc={submitReply} selfEditBoxProps={selfEditObj}\r\n                                                   editBoxFunc={changeSelfReplyBox}\r\n                                                   setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                   submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                   editButtons={true}/>);\r\n                    } else {\r\n                        newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n                                                   replyBoxFunc={changeReplyBox}\r\n                                                   setReplyBoxText={changeSpecificReplyBox}\r\n                                                   submitReplyFunc={submitReply} selfEditBoxProps={selfEditObj}\r\n                                                   editBoxFunc={changeSelfReplyBox}\r\n                                                   setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                   submitEditFunc={submitEdit} deleteFunc={deletePost}\r\n                                                   editButtons={false}/>);\r\n                    }\r\n                    let initialParentID = thisPost.postID;\r\n                    while (initialParentID <= maxLevel) {\r\n                        ignore = ignore.concat(constructChildren(thisPost.childrenID, initialParentID));\r\n                        initialParentID += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        constructPostDictionary();\r\n\r\n        setElementArray(newElementArray);\r\n\r\n    }, [changeReplyBox, changeSpecificReplyBox, postDictionary, replyBox, submitReply, changeSelfReplyBox,\r\n        changeSpecificSelfReply, selfEdit])\r\n\r\n    useEffect(() => {\r\n        pushPostDictionaryChanges()\r\n    }, [pushPostDictionaryChanges])\r\n\r\n    useEffect(() => {\r\n        changeReplyBox()\r\n    }, [changeReplyBox])\r\n\r\n    useEffect(() => {\r\n        changeSelfReplyBox()\r\n    }, [changeSelfReplyBox])\r\n\r\n    useEffect(() => {\r\n        makePostElement()\r\n    }, [makePostElement])\r\n\r\n    // const makePostElement = () => {\r\n    //\r\n    //     const getPost = (ID) => {\r\n    //         for (let post in postDictionary) {\r\n    //             if (postDictionary[post].postID === ID) {\r\n    //                 return {\r\n    //                     'postID': postDictionary[post].postID,\r\n    //                     'name': postDictionary[post].name,\r\n    //                     'body': postDictionary[post].body\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     let maxLevel = 0;\r\n    //\r\n    //     const getMaxLevel = () => {\r\n    //         postDictionary.forEach((post) => {\r\n    //             let a = 0;\r\n    //             let b = post.postID;\r\n    //             if (b > a) {\r\n    //                 maxLevel = b;\r\n    //             }\r\n    //             a = b;\r\n    //         })\r\n    //     }\r\n    //\r\n    //     getMaxLevel();\r\n    //\r\n    //     const removePosts = (posts) => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             if (posts.includes(post.postID)) {\r\n    //                 postDictionary.splice(index, 1);\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //\r\n    //     const constructChildren = (children, parentID) => {\r\n    //         let postsToRemove = [];\r\n    //         children.forEach((replyObj) => {\r\n    //             if (replyObj.pID === parentID) {\r\n    //                 let match = getPost(replyObj.cID);\r\n    //                 match.level = replyObj.level;\r\n    //                 elementArray.push(<Reply post={match} key={replyObj.cID}/>);\r\n    //                 postsToRemove.push(replyObj.cID);\r\n    //             }\r\n    //         })\r\n    //         removePosts(postsToRemove);\r\n    //     }\r\n    //\r\n    //\r\n    //     const constructPostDictionary = () => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             let fp = getPost(post.postID);\r\n    //             let replyPropObj = {};\r\n    //             replyBox.forEach((replyProp) => {\r\n    //                 if (fp.postID === replyProp.postID) {\r\n    //                     replyPropObj = replyProp;\r\n    //                 }\r\n    //             })\r\n    //             elementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n    //                                     replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n    //             submitReplyFunc={submitReply}/>);\r\n    //             let initialParentID = post.postID;\r\n    //             while (initialParentID <= maxLevel) {\r\n    //                 constructChildren(post.childrenID, initialParentID);\r\n    //                 initialParentID += 1;\r\n    //             }\r\n    //             // postDictionary.splice(index, 1);\r\n    //         })\r\n    //     }\r\n    //\r\n    //     constructPostDictionary();\r\n    //\r\n    //     return elementArray;\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {elementArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsTable;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LogoutButton =(props)=>{\r\n    const {setLogoutFunc, style} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={()=>(setLogoutFunc(false), sessionStorage.setItem('auth-roar', ''))}\r\n        className={'rounded-pill'}>Logout</Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst MakePost =(props)=>{\r\n\r\n    const {setPostText, submitPostFunc} = props;\r\n\r\n    return (\r\n        <div className={'my-2'}>\r\n            <h3 className={'title'}>Speak Your Mind</h3>\r\n            <textarea className={'form-control'} rows={3} id={'post-box'}\r\n            onChange={event => {setPostText(event)}}/>\r\n            <Button variant={'secondary'} onClick={()=>{submitPostFunc()}}\r\n            className={'form-control'}>Submit Post</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MakePost;","import {useCallback, useEffect, useState} from \"react\";\r\nimport Title from \"../coponents/Title\";\r\nimport Searchbar from \"../coponents/Searchbar\";\r\nimport constructPostDictionary from \"../functions/constructPostDictionary\";\r\nimport PostsTable from \"../coponents/PostsTable\";\r\nimport LogoutButton from \"../coponents/LogoutButton\";\r\nimport MakePost from \"../coponents/MakePost\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst Homepage = (props) => {\r\n\r\n    const {setLogoutFunc} = props;\r\n\r\n    const [allUsers, setAllUsers] = useState([]);\r\n    const [postDictionary, setPostDictionary] = useState([]);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [postText, setPostText] = useState('');\r\n\r\n    const getAllUsers = useCallback(async () => {\r\n        if (!allUsers.length) {\r\n            let response = await fetch('http://127.0.0.1:8082/users/read');\r\n            let allUsers = await response.json();\r\n            setAllUsers(allUsers);\r\n        }\r\n    }, [allUsers.length]);\r\n\r\n    const constructAllPosts = useCallback(() => {\r\n        let newPostDictionary = constructPostDictionary(allUsers);\r\n        if (newPostDictionary.length) {\r\n            setPostDictionary(newPostDictionary);\r\n        } else {\r\n            setPostDictionary([]);\r\n        }\r\n    }, [allUsers]);\r\n\r\n    const constructPage = useCallback(async () => {\r\n        await getAllUsers();\r\n        await constructAllPosts();\r\n    }, [constructAllPosts, getAllUsers]);\r\n\r\n    const submitPost = useCallback(async ()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        let postObj = {\r\n            'body': postText,\r\n            'visibility': true,\r\n            'user': {\r\n                'id': userID\r\n            }\r\n        }\r\n        let postResponse = await fetch('http://127.0.0.1:8082/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(postObj)\r\n        })\r\n\r\n        if (postResponse.status === 201) {\r\n            console.log('Post successful')\r\n        } else {\r\n            console.log('Post unsuccessful')\r\n        }\r\n    }, [postText])\r\n\r\n    const handleInputText = (event) => {\r\n        setSearchText(event.target.value);\r\n    }\r\n\r\n    const handlePostText =(event)=>{\r\n        setPostText(event.target.value);\r\n    }\r\n\r\n    const constructSearch = () => {\r\n        const searchedPosts = []\r\n        if (searchText === '') {\r\n            constructPage();\r\n        }\r\n        postDictionary.forEach((post)=>{\r\n            if (post.body.toLowerCase().includes(searchText.toLowerCase())) {\r\n                searchedPosts.push(post)\r\n            }\r\n        })\r\n        setPostDictionary(searchedPosts)\r\n    }\r\n\r\n    useEffect(() => {\r\n        constructPage();\r\n    }, [constructPage, postText])\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <div className={'row'}>\r\n                <Title/>\r\n                <LogoutButton setLogoutFunc={setLogoutFunc}/>\r\n                <MakePost setPostText={handlePostText} submitPostFunc={submitPost}/>\r\n            </div>\r\n            <div className={'row'}>\r\n                <Searchbar userInputFunc={handleInputText} searchFunc={constructSearch}/>\r\n                <PostsTable postDictionary={postDictionary}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","const LoginInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'text'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Username'}/>\r\n    )\r\n}\r\n\r\nexport default LoginInput;","const PasswordInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'password'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Password'}/>\r\n    )\r\n}\r\n\r\nexport default PasswordInput;","const LoginTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Login</h3>\r\n    )\r\n}\r\n\r\nexport default LoginTitle;","import {Button} from \"react-bootstrap\";\r\n\r\nconst RegisterButton = (props) => {\r\n    const {redirectFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (redirectFunc())}\r\n                className={'rounded-pill form-control my-1'}>Register</Button>\r\n    )\r\n}\r\n\r\nexport default RegisterButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LoginButton = (props) => {\r\n    const {loginFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (loginFunc())}\r\n                className={'rounded-pill form-control'}>Login</Button>\r\n    )\r\n}\r\n\r\nexport default LoginButton;","const RegisterTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Register</h3>\r\n    )\r\n}\r\n\r\nexport default RegisterTitle;","const FormInput =(props)=>{\r\n    const {inputFunc, type, placeholder} = props;\r\n    return (\r\n        <input type={type} onChange={event => inputFunc(event)}\r\n        className={'form-control rounded-pill my-1'} placeholder={placeholder}/>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import {useCallback, useState} from \"react\";\r\nimport RegisterTitle from \"../coponents/RegisterTitle\";\r\nimport FormInput from \"../coponents/FormInput\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nconst Register = (props) => {\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const inputUsername = (event) => {\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const inputEmail = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const loginFunc = useCallback(async () => {\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        let response = await fetch('http://127.0.0.1:8082/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'username': username,\r\n                'password': password\r\n            }\r\n        });\r\n        let auth_key = await response.text();\r\n        if (auth_key !== 'INVALID') {\r\n            sessionStorage.setItem('auth-roar', auth_key);\r\n            console.log('Successfully logged in');\r\n            setLoginFunc(true);\r\n        } else {\r\n            console.log('Unsuccessful attempt');\r\n        }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const submitUserData = async () => {\r\n\r\n        let bodyObj = {\r\n            'username': username,\r\n            'name': name,\r\n            'email': email,\r\n            'password': password\r\n        }\r\n\r\n        let response = await fetch('http://127.0.0.1:8082/users/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(bodyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Successfully created');\r\n            // setLoginUsername(username);\r\n            // setLoginPassword(password);\r\n            // setRegister(false);\r\n            await loginFunc();\r\n        } else {\r\n            console.log('Unsuccessful!')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <RegisterTitle/>\r\n            <FormInput inputFunc={inputUsername} type={'text'} placeholder={'Username'}/>\r\n            <FormInput inputFunc={inputName} type={'text'} placeholder={'Name'}/>\r\n            <FormInput inputFunc={inputEmail} type={'email'} placeholder={'Email'}/>\r\n            <FormInput inputFunc={inputPassword} type={'password'} placeholder={'Password'}/>\r\n            <Button variant={'secondary'} onClick={() => {\r\n                submitUserData()\r\n            }} className={'rounded-pill form-control'}>Submit</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import {useCallback, useEffect, useState} from \"react\";\r\nimport LoginInput from \"../coponents/LoginInput\";\r\nimport PasswordInput from \"../coponents/PasswordInput\";\r\nimport LoginTitle from \"../coponents/LoginTitle\";\r\nimport RegisterButton from \"../coponents/RegisterButton\";\r\nimport LoginButton from \"../coponents/LoginButton\";\r\nimport Register from \"./Register\";\r\n\r\nconst LoginRegister =(props)=>{\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [register, setRegister] = useState(false);\r\n\r\n    const inputUsername = (event) =>{\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event)=>{\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const registerRedirectFunc =()=>{\r\n        setRegister(true);\r\n    }\r\n    \r\n    const loginFunc = useCallback(async()=>{\r\n            console.log(`username: ${username}, password: ${password}`)\r\n            let response = await fetch('http://127.0.0.1:8082/users/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'username': username,\r\n                    'password': password\r\n                }\r\n            });\r\n            let auth_key = await response.text();\r\n            if (auth_key !== 'INVALID') {\r\n                sessionStorage.setItem('auth-roar', auth_key);\r\n                console.log('Successfully logged in');\r\n                setLoginFunc(true);\r\n            } else {\r\n                console.log('Unsuccessful attempt');\r\n            }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const constructPage = useCallback(()=>{\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        if (!register) {\r\n            return (\r\n                <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n                    <LoginTitle/>\r\n                    <LoginInput inputFunc={inputUsername} defaultValue={username}/>\r\n                    <PasswordInput inputFunc={inputPassword} defaultValue={password}/>\r\n                    <LoginButton loginFunc={loginFunc}/>\r\n                    <div className={'separator post-text'}>Or</div>\r\n                    <RegisterButton redirectFunc={registerRedirectFunc}/>\r\n                </div>\r\n            )\r\n        } else if (register) {\r\n            return (\r\n                <Register setLoginFunc={setLoginFunc}/>\r\n            )\r\n        }\r\n    }, [loginFunc, password, register, username])\r\n\r\n    // useEffect(()=>{\r\n    //     constructPage()\r\n    // }, [constructPage])\r\n\r\n    return (\r\n        <div>\r\n            {constructPage()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginRegister;","import 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/roar.css';\r\nimport './css/fonts.css';\r\nimport Homepage from \"./pages/Homepage\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport LoginRegister from \"./pages/LoginRegister\";\r\n\r\nconst App = () => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    const [page, setPage] = useState([]);\r\n\r\n    const checkLoggedIn = useCallback(()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        if (auth && (auth !== 'INVALID')) {\r\n            setLoggedIn(true);\r\n        } else {\r\n            setLoggedIn(false);\r\n        }\r\n    }, [])\r\n\r\n    const getPageToDisplay = useCallback(()=>{\r\n        if (loggedIn) {\r\n            setPage([<Homepage setLogoutFunc={setLoggedIn}/>]);\r\n        } else {\r\n            setPage([<LoginRegister setLoginFunc={setLoggedIn}/>]);\r\n        }\r\n    }, [loggedIn])\r\n\r\n    useEffect(()=>{\r\n        checkLoggedIn();\r\n        getPageToDisplay();\r\n    }, [checkLoggedIn, getPageToDisplay])\r\n    return (\r\n        <div>\r\n            {page}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}