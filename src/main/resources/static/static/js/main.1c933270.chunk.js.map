{"version":3,"sources":["coponents/Title.js","coponents/Searchbar.js","functions/constructPostDictionary.js","coponents/Post.js","coponents/Reply.js","functions/getUserID.js","coponents/PostsTable.js","coponents/LogoutButton.js","coponents/MakePost.js","pages/Homepage.js","coponents/LoginInput.js","coponents/PasswordInput.js","coponents/LoginTitle.js","coponents/RegisterButton.js","coponents/LoginButton.js","coponents/RegisterTitle.js","coponents/FormInput.js","pages/Register.js","pages/LoginRegister.js","App.js","index.js"],"names":["Title","props","style","className","Searchbar","userInputFunc","searchFunc","InputGroup","type","onChange","event","Button","variant","onClick","constructPostDictionary","allUsers","postDictionaryList","forEach","user","posts","post","postItem","id","name","body","searchChildren3","parent","children","recursionLevel","Array","isArray","length","child","childrenID","push","pID","cID","level","Post","replyBoxProps","replyBoxFunc","setReplyBoxText","submitReplyFunc","isBox","Card","Text","postID","rows","Reply","getUserID","auth","a","fetch","headers","response","text","PostsTable","postDictionary","useState","elementArray","setElementArray","replyBox","setReplyBox","currentPostDictionary","setCurrentPostDictionary","pushPostDictionaryChanges","useCallback","changeReplyBox","replyToChange","toApply","currentPost","thisReply","changeSpecificReplyBox","reply","currentReply","boxText","target","value","console","log","submitReply","sessionStorage","getItem","userID","replyObj","method","JSON","stringify","status","makePostElement","newElementArray","ignore","getPost","ID","maxLevel","b","constructChildren","parentID","postsToIgnore","currentChild","match","thisPost","includes","fp","replyPropObj","replyProp","initialParentID","concat","useEffect","LogoutButton","setLogoutFunc","setItem","MakePost","setPostText","submitPostFunc","Homepage","setAllUsers","setPostDictionary","searchText","setSearchText","postText","getAllUsers","json","constructAllPosts","newPostDictionary","constructPage","submitPost","postObj","LoginInput","inputFunc","placeholder","PasswordInput","LoginTitle","RegisterButton","redirectFunc","LoginButton","loginFunc","RegisterTitle","FormInput","Register","setLoginFunc","username","setUsername","setName","email","setEmail","password","setPassword","auth_key","submitUserData","bodyObj","LoginRegister","register","setRegister","inputUsername","inputPassword","registerRedirectFunc","defaultValue","App","loggedIn","setLoggedIn","page","setPage","checkLoggedIn","getPageToDisplay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c933270.chunk.js","sourcesContent":["const Title =(props)=>{\r\n    const {style} = props;\r\n    return (\r\n        <h1 className={'title'} style={style}>Welcome to Roar</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import {InputGroup, Button} from \"react-bootstrap\";\r\n\r\nconst Searchbar = (props) => {\r\n    const {userInputFunc, searchFunc} = props;\r\n    return (\r\n        <InputGroup className={'my-3'}>\r\n            <input type={'search'} onChange={(event) => (userInputFunc(event))} className={'form-control'}/>\r\n            <Button variant={'secondary'} onClick={()=>(searchFunc())}>Search</Button>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","const constructPostDictionary =(allUsers)=>{\r\n    const postDictionaryList = [];\r\n    allUsers.forEach((user)=>{\r\n        user.posts.forEach((post)=>{\r\n            let postItem = {\r\n                'postID': post.id,\r\n                'name': user.name,\r\n                'body': post.body,\r\n                'childrenID': []\r\n            }\r\n            const searchChildren3 =(parent, children, recursionLevel)=>{\r\n                if (Array.isArray(children) && (children.length !== 0)) {\r\n                    children.forEach((child)=>{\r\n                        postItem.childrenID.push({pID: parent.id, cID: child.id, level: recursionLevel});\r\n                        recursionLevel += 1;\r\n                        return searchChildren3(child, child.children, recursionLevel);\r\n                    })\r\n                } else {\r\n                    return postItem;\r\n                }\r\n            }\r\n            searchChildren3(post, post.children, 1);\r\n            postDictionaryList.push(postItem);\r\n        })\r\n    })\r\n    return postDictionaryList;\r\n}\r\n\r\nexport default constructPostDictionary;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Post = (props) => {\r\n\r\n    let {\r\n        post, replyBoxProps, replyBoxFunc,\r\n        setReplyBoxText, submitReplyFunc\r\n    } = props;\r\n\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <Card className={'dark-green-bg'}>\r\n    //             <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n    //             <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n    //             <Button variant={'link'} onClick={()=>{replyBoxFunc(replyBoxProps.postID)}}\r\n    //                     className={'button-as-link px-0'}>Reply</Button>\r\n    //         </Card>\r\n    //     </div>\r\n    // )\r\n\r\n    if (replyBoxProps.isBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }}\r\n                            className={'button-as-link px-0'}>Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setReplyBoxText(replyBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitReplyFunc(replyBoxProps.postID)\r\n                    }}\r\n                    >Submit Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import {Card} from \"react-bootstrap\";\r\n\r\nconst Reply =(props)=>{\r\n    const {post} = props;\r\n    return (\r\n        <div>\r\n            <Card className={'light-green-bg'}>\r\n                <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                <Card.Text className={'post-text'}>At reply level {post.level}</Card.Text>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reply;","const getUserID = async (auth)=>{\r\n    let response = await fetch('http://127.0.0.1:8082/users/getID', {\r\n        headers: {\r\n            'token': auth\r\n        }\r\n    })\r\n    return await response.text();\r\n}\r\n\r\nexport default getUserID;","import Post from \"./Post\";\r\nimport Reply from \"./Reply\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst PostsTable = (props) => {\r\n\r\n    const {postDictionary} = props;\r\n\r\n    const [elementArray, setElementArray] = useState([]);\r\n    const [replyBox, setReplyBox] = useState([]);\r\n    const [currentPostDictionary, setCurrentPostDictionary] = useState([]);\r\n\r\n    const pushPostDictionaryChanges = useCallback(() => {\r\n        setCurrentPostDictionary(postDictionary)\r\n    }, [postDictionary])\r\n\r\n    const changeReplyBox = useCallback((replyToChange) => {\r\n        const toApply = [];\r\n        if (!replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setReplyBox(toApply);\r\n        } else if (replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (replyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (replyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': true,\r\n                        'boxText': '',\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setReplyBox(toApply);\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificReplyBox = useCallback((postID, event) => {\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                currentReply.boxText = event.target.value;\r\n                console.log(currentReply.boxText);\r\n            }\r\n        }\r\n    }, [replyBox])\r\n\r\n    const submitReply = useCallback(async (postID) => {\r\n        let replyObj;\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                replyObj = {\r\n                    'body': currentReply.boxText,\r\n                    'visibility': true,\r\n                    'user': {\r\n                        'id': userID\r\n                    },\r\n                    'parent': {\r\n                        'id': postID\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch('http://127.0.0.1:8082/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(replyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Reply successful')\r\n        } else {\r\n            console.log('Reply failed')\r\n        }\r\n    }, [replyBox])\r\n\r\n    const makePostElement = useCallback(() => {\r\n\r\n        const newElementArray = [];\r\n\r\n        let ignore = [];\r\n\r\n        const getPost = (ID) => {\r\n            for (let post in currentPostDictionary) {\r\n                if (currentPostDictionary[post].postID === ID) {\r\n                    return {\r\n                        'postID': currentPostDictionary[post].postID,\r\n                        'name': currentPostDictionary[post].name,\r\n                        'body': currentPostDictionary[post].body\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let maxLevel = 0;\r\n\r\n        const getMaxLevel = () => {\r\n            currentPostDictionary.forEach((post) => {\r\n                let a = 0;\r\n                let b = post.postID;\r\n                if (b > a) {\r\n                    maxLevel = b;\r\n                }\r\n                a = b;\r\n            })\r\n        }\r\n\r\n        getMaxLevel();\r\n\r\n        // const removePosts = (posts) => {\r\n        //     // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n        //     //     if (posts.includes(post.postID)) {\r\n        //     //         setCurrentPostDictionary(currentPostDictionary.splice(index, 1));\r\n        //     //     }\r\n        //     // })\r\n        //     for (let post in currentPostDictionary) {\r\n        //         let thisPost = currentPostDictionary[post];\r\n        //         if (posts.includes(thisPost.postID)) {\r\n        //             setCurrentPostDictionary(currentPostDictionary.splice(post, 1));\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        const constructChildren = (children, parentID) => {\r\n            let postsToIgnore = [];\r\n            for (let child in children) {\r\n                let currentChild = children[child];\r\n                if (currentChild.pID === parentID) {\r\n                    let match = getPost(currentChild.cID);\r\n                    match.level = currentChild.level;\r\n                    newElementArray.push(<Reply post={match} key={currentChild.cID}/>);\r\n                    postsToIgnore.push(currentChild.cID);\r\n                }\r\n            }\r\n            return postsToIgnore;\r\n        }\r\n\r\n\r\n        const constructPostDictionary = () => {\r\n            // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n            //     let fp = getPost(post.postID);\r\n            //     let replyPropObj = {};\r\n            //     replyBox.forEach((replyProp) => {\r\n            //         if (fp.postID === replyProp.postID) {\r\n            //             replyPropObj = replyProp;\r\n            //         }\r\n            //     })\r\n            //     newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n            //                             replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n            //                             submitReplyFunc={submitReply}/>);\r\n            //     let initialParentID = post.postID;\r\n            //     while (initialParentID <= maxLevel) {\r\n            //         constructChildren(post.childrenID, initialParentID);\r\n            //         initialParentID += 1;\r\n            //     }\r\n            // })\r\n            for (let post in currentPostDictionary) {\r\n                let thisPost = currentPostDictionary[post];\r\n                if (!ignore.includes(thisPost.postID)) {\r\n                    let fp = getPost(thisPost.postID);\r\n                    let replyPropObj = {};\r\n                    replyBox.forEach((replyProp) => {\r\n                        if (fp.postID === replyProp.postID) {\r\n                            replyPropObj = replyProp;\r\n                        }\r\n                    })\r\n                    newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n                                               replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n                                               submitReplyFunc={submitReply}/>);\r\n                    let initialParentID = thisPost.postID;\r\n                    while (initialParentID <= maxLevel) {\r\n                        console.log(ignore);\r\n                        ignore = ignore.concat(constructChildren(thisPost.childrenID, initialParentID));\r\n                        initialParentID += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        constructPostDictionary();\r\n\r\n        setElementArray(newElementArray);\r\n\r\n    }, [changeReplyBox, changeSpecificReplyBox, postDictionary, replyBox, submitReply])\r\n\r\n    useEffect(() => {\r\n        pushPostDictionaryChanges()\r\n    }, [pushPostDictionaryChanges])\r\n\r\n    useEffect(() => {\r\n        changeReplyBox()\r\n    }, [changeReplyBox])\r\n\r\n    useEffect(() => {\r\n        makePostElement()\r\n    }, [makePostElement])\r\n\r\n    // const makePostElement = () => {\r\n    //\r\n    //     const getPost = (ID) => {\r\n    //         for (let post in postDictionary) {\r\n    //             if (postDictionary[post].postID === ID) {\r\n    //                 return {\r\n    //                     'postID': postDictionary[post].postID,\r\n    //                     'name': postDictionary[post].name,\r\n    //                     'body': postDictionary[post].body\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     let maxLevel = 0;\r\n    //\r\n    //     const getMaxLevel = () => {\r\n    //         postDictionary.forEach((post) => {\r\n    //             let a = 0;\r\n    //             let b = post.postID;\r\n    //             if (b > a) {\r\n    //                 maxLevel = b;\r\n    //             }\r\n    //             a = b;\r\n    //         })\r\n    //     }\r\n    //\r\n    //     getMaxLevel();\r\n    //\r\n    //     const removePosts = (posts) => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             if (posts.includes(post.postID)) {\r\n    //                 postDictionary.splice(index, 1);\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //\r\n    //     const constructChildren = (children, parentID) => {\r\n    //         let postsToRemove = [];\r\n    //         children.forEach((replyObj) => {\r\n    //             if (replyObj.pID === parentID) {\r\n    //                 let match = getPost(replyObj.cID);\r\n    //                 match.level = replyObj.level;\r\n    //                 elementArray.push(<Reply post={match} key={replyObj.cID}/>);\r\n    //                 postsToRemove.push(replyObj.cID);\r\n    //             }\r\n    //         })\r\n    //         removePosts(postsToRemove);\r\n    //     }\r\n    //\r\n    //\r\n    //     const constructPostDictionary = () => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             let fp = getPost(post.postID);\r\n    //             let replyPropObj = {};\r\n    //             replyBox.forEach((replyProp) => {\r\n    //                 if (fp.postID === replyProp.postID) {\r\n    //                     replyPropObj = replyProp;\r\n    //                 }\r\n    //             })\r\n    //             elementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n    //                                     replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n    //             submitReplyFunc={submitReply}/>);\r\n    //             let initialParentID = post.postID;\r\n    //             while (initialParentID <= maxLevel) {\r\n    //                 constructChildren(post.childrenID, initialParentID);\r\n    //                 initialParentID += 1;\r\n    //             }\r\n    //             // postDictionary.splice(index, 1);\r\n    //         })\r\n    //     }\r\n    //\r\n    //     constructPostDictionary();\r\n    //\r\n    //     return elementArray;\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {elementArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsTable;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LogoutButton =(props)=>{\r\n    const {setLogoutFunc, style} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={()=>(setLogoutFunc(false), sessionStorage.setItem('auth-roar', ''))}\r\n        className={'rounded-pill'}>Logout</Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst MakePost =(props)=>{\r\n\r\n    const {setPostText, submitPostFunc} = props;\r\n\r\n    return (\r\n        <div className={'my-2'}>\r\n            <h3 className={'title'}>Speak You Mind</h3>\r\n            <textarea className={'form-control'} rows={3} id={'post-box'}\r\n            onChange={event => {setPostText(event)}}/>\r\n            <Button variant={'secondary'} onClick={()=>{submitPostFunc()}}\r\n            className={'form-control'}>Submit Post</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MakePost;","import {useCallback, useEffect, useState} from \"react\";\r\nimport Title from \"../coponents/Title\";\r\nimport Searchbar from \"../coponents/Searchbar\";\r\nimport constructPostDictionary from \"../functions/constructPostDictionary\";\r\nimport PostsTable from \"../coponents/PostsTable\";\r\nimport LogoutButton from \"../coponents/LogoutButton\";\r\nimport MakePost from \"../coponents/MakePost\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst Homepage = (props) => {\r\n\r\n    const {setLogoutFunc} = props;\r\n\r\n    const [allUsers, setAllUsers] = useState([]);\r\n    const [postDictionary, setPostDictionary] = useState([]);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [postText, setPostText] = useState('');\r\n\r\n    const [reply, setReply] = useState({});\r\n\r\n    const getAllUsers = useCallback(async () => {\r\n        if (!allUsers.length) {\r\n            let response = await fetch('http://127.0.0.1:8082/users/read');\r\n            let allUsers = await response.json();\r\n            setAllUsers(allUsers);\r\n        }\r\n    }, [allUsers.length]);\r\n\r\n    const constructAllPosts = useCallback(() => {\r\n        let newPostDictionary = constructPostDictionary(allUsers);\r\n        if (newPostDictionary.length) {\r\n            setPostDictionary(newPostDictionary);\r\n        } else {\r\n            setPostDictionary([]);\r\n        }\r\n    }, [allUsers]);\r\n\r\n    const constructPage = useCallback(async () => {\r\n        await getAllUsers();\r\n        await constructAllPosts();\r\n    }, [constructAllPosts, getAllUsers]);\r\n\r\n    const submitPost = useCallback(async ()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        let postObj = {\r\n            'body': postText,\r\n            'visibility': true,\r\n            'user': {\r\n                'id': userID\r\n            }\r\n        }\r\n        let postResponse = await fetch('http://127.0.0.1:8082/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(postObj)\r\n        })\r\n\r\n        if (postResponse.status === 201) {\r\n            console.log('Post successful')\r\n        } else {\r\n            console.log('Post unsuccessful')\r\n        }\r\n    }, [postText])\r\n\r\n    const handleInputText = (event) => {\r\n        setSearchText(event.target.value);\r\n    }\r\n\r\n    const handlePostText =(event)=>{\r\n        setPostText(event.target.value);\r\n    }\r\n\r\n    const constructSearch = () => {\r\n        console.log('feature coming soon');\r\n    }\r\n\r\n    useEffect(() => {\r\n        constructPage();\r\n    }, [constructPage, searchText, postText])\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <div className={'row'}>\r\n                <Title/>\r\n                <LogoutButton setLogoutFunc={setLogoutFunc}/>\r\n                <MakePost setPostText={handlePostText} submitPostFunc={submitPost}/>\r\n            </div>\r\n            <div className={'row'}>\r\n                <Searchbar userInputFunc={handleInputText} searchFunc={constructSearch}/>\r\n                <PostsTable postDictionary={postDictionary}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","const LoginInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'text'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Username'}/>\r\n    )\r\n}\r\n\r\nexport default LoginInput;","const PasswordInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'password'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Password'}/>\r\n    )\r\n}\r\n\r\nexport default PasswordInput;","const LoginTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Login</h3>\r\n    )\r\n}\r\n\r\nexport default LoginTitle;","import {Button} from \"react-bootstrap\";\r\n\r\nconst RegisterButton = (props) => {\r\n    const {redirectFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (redirectFunc())}\r\n                className={'rounded-pill form-control my-1'}>Register</Button>\r\n    )\r\n}\r\n\r\nexport default RegisterButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LoginButton = (props) => {\r\n    const {loginFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (loginFunc())}\r\n                className={'rounded-pill form-control'}>Login</Button>\r\n    )\r\n}\r\n\r\nexport default LoginButton;","const RegisterTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Register</h3>\r\n    )\r\n}\r\n\r\nexport default RegisterTitle;","const FormInput =(props)=>{\r\n    const {inputFunc, type, placeholder} = props;\r\n    return (\r\n        <input type={type} onChange={event => inputFunc(event)}\r\n        className={'form-control rounded-pill my-1'} placeholder={placeholder}/>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import {useCallback, useState} from \"react\";\r\nimport RegisterTitle from \"../coponents/RegisterTitle\";\r\nimport FormInput from \"../coponents/FormInput\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nconst Register = (props) => {\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const inputUsername = (event) => {\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const inputEmail = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const loginFunc = useCallback(async () => {\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        let response = await fetch('http://127.0.0.1:8082/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'username': username,\r\n                'password': password\r\n            }\r\n        });\r\n        let auth_key = await response.text();\r\n        if (auth_key !== 'INVALID') {\r\n            sessionStorage.setItem('auth-roar', auth_key);\r\n            console.log('Successfully logged in');\r\n            setLoginFunc(true);\r\n        } else {\r\n            console.log('Unsuccessful attempt');\r\n        }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const submitUserData = async () => {\r\n\r\n        let bodyObj = {\r\n            'username': username,\r\n            'name': name,\r\n            'email': email,\r\n            'password': password\r\n        }\r\n\r\n        let response = await fetch('http://127.0.0.1:8082/users/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(bodyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Successfully created');\r\n            // setLoginUsername(username);\r\n            // setLoginPassword(password);\r\n            // setRegister(false);\r\n            await loginFunc();\r\n        } else {\r\n            console.log('Unsuccessful!')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <RegisterTitle/>\r\n            <FormInput inputFunc={inputUsername} type={'text'} placeholder={'Username'}/>\r\n            <FormInput inputFunc={inputName} type={'text'} placeholder={'Name'}/>\r\n            <FormInput inputFunc={inputEmail} type={'email'} placeholder={'Email'}/>\r\n            <FormInput inputFunc={inputPassword} type={'password'} placeholder={'Password'}/>\r\n            <Button variant={'secondary'} onClick={() => {\r\n                submitUserData()\r\n            }} className={'rounded-pill form-control'}>Submit</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import {useCallback, useEffect, useState} from \"react\";\r\nimport LoginInput from \"../coponents/LoginInput\";\r\nimport PasswordInput from \"../coponents/PasswordInput\";\r\nimport LoginTitle from \"../coponents/LoginTitle\";\r\nimport RegisterButton from \"../coponents/RegisterButton\";\r\nimport LoginButton from \"../coponents/LoginButton\";\r\nimport Register from \"./Register\";\r\n\r\nconst LoginRegister =(props)=>{\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [register, setRegister] = useState(false);\r\n\r\n    const inputUsername = (event) =>{\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event)=>{\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const registerRedirectFunc =()=>{\r\n        setRegister(true);\r\n    }\r\n    \r\n    const loginFunc = useCallback(async()=>{\r\n            console.log(`username: ${username}, password: ${password}`)\r\n            let response = await fetch('http://127.0.0.1:8082/users/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'username': username,\r\n                    'password': password\r\n                }\r\n            });\r\n            let auth_key = await response.text();\r\n            if (auth_key !== 'INVALID') {\r\n                sessionStorage.setItem('auth-roar', auth_key);\r\n                console.log('Successfully logged in');\r\n                setLoginFunc(true);\r\n            } else {\r\n                console.log('Unsuccessful attempt');\r\n            }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const constructPage = useCallback(()=>{\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        if (!register) {\r\n            return (\r\n                <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n                    <LoginTitle/>\r\n                    <LoginInput inputFunc={inputUsername} defaultValue={username}/>\r\n                    <PasswordInput inputFunc={inputPassword} defaultValue={password}/>\r\n                    <LoginButton loginFunc={loginFunc}/>\r\n                    <div className={'separator post-text'}>Or</div>\r\n                    <RegisterButton redirectFunc={registerRedirectFunc}/>\r\n                </div>\r\n            )\r\n        } else if (register) {\r\n            return (\r\n                <Register setLoginFunc={setLoginFunc}/>\r\n            )\r\n        }\r\n    }, [loginFunc, password, register, username])\r\n\r\n    // useEffect(()=>{\r\n    //     constructPage()\r\n    // }, [constructPage])\r\n\r\n    return (\r\n        <div>\r\n            {constructPage()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginRegister;","import './css/bootstrap.css';\r\nimport './css/roar.css'\r\nimport './css/fonts.css';\r\nimport Homepage from \"./pages/Homepage\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport LoginRegister from \"./pages/LoginRegister\";\r\n\r\nconst App = () => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    const [page, setPage] = useState([]);\r\n\r\n    const checkLoggedIn = useCallback(()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        if (auth && (auth !== 'INVALID')) {\r\n            setLoggedIn(true);\r\n        } else {\r\n            setLoggedIn(false);\r\n        }\r\n    }, [])\r\n\r\n    const getPageToDisplay = useCallback(()=>{\r\n        if (loggedIn) {\r\n            setPage([<Homepage setLogoutFunc={setLoggedIn}/>]);\r\n        } else {\r\n            setPage([<LoginRegister setLoginFunc={setLoggedIn}/>]);\r\n        }\r\n    }, [loggedIn])\r\n\r\n    useEffect(()=>{\r\n        checkLoggedIn();\r\n        getPageToDisplay();\r\n    }, [checkLoggedIn, getPageToDisplay])\r\n    return (\r\n        <div>\r\n            {page}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}