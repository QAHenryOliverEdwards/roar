{"version":3,"sources":["coponents/Title.js","coponents/Searchbar.js","functions/constructPostDictionary.js","coponents/Post.js","coponents/Reply.js","functions/getUserID.js","coponents/PostsTable.js","coponents/LogoutButton.js","coponents/MakePost.js","pages/Homepage.js","coponents/LoginInput.js","coponents/PasswordInput.js","coponents/LoginTitle.js","coponents/RegisterButton.js","coponents/LoginButton.js","coponents/RegisterTitle.js","coponents/FormInput.js","pages/Register.js","pages/LoginRegister.js","App.js","index.js"],"names":["Title","props","style","className","Searchbar","userInputFunc","searchFunc","InputGroup","type","onChange","event","Button","variant","onClick","constructPostDictionary","allUsers","postDictionaryList","forEach","user","posts","post","postItem","id","name","body","searchChildren3","parent","children","recursionLevel","Array","isArray","length","child","childrenID","push","pID","cID","level","Post","replyBoxProps","replyBoxFunc","setReplyBoxText","submitReplyFunc","selfEditBoxProps","editBoxFunc","setSelfEditBoxText","submitEditFunc","deleteFunc","console","log","isBox","isEditBox","Card","postID","Text","rows","Reply","getUserID","auth","a","fetch","headers","response","text","PostsTable","postDictionary","useState","elementArray","setElementArray","replyBox","setReplyBox","currentPostDictionary","setCurrentPostDictionary","selfEdit","setSelfEdit","pushPostDictionaryChanges","useCallback","changeSelfReplyBox","selfReplyToChange","toApply","currentPost","thisReply","changeSpecificSelfReply","edit","currentEdit","boxText","target","value","submitEdit","sessionStorage","getItem","editObj","method","JSON","stringify","status","deletePost","changeReplyBox","replyToChange","changeSpecificReplyBox","reply","currentReply","submitReply","userID","replyObj","makePostElement","newElementArray","ignore","getPost","ID","maxLevel","b","constructChildren","parentID","postsToIgnore","currentChild","match","selfEditObj","thisPost","includes","fp","replyPropObj","replyProp","initialParentID","concat","useEffect","LogoutButton","setLogoutFunc","setItem","MakePost","setPostText","submitPostFunc","Homepage","setAllUsers","setPostDictionary","searchText","setSearchText","postText","getAllUsers","json","constructAllPosts","newPostDictionary","constructPage","submitPost","postObj","LoginInput","inputFunc","placeholder","PasswordInput","LoginTitle","RegisterButton","redirectFunc","LoginButton","loginFunc","RegisterTitle","FormInput","Register","setLoginFunc","username","setUsername","setName","email","setEmail","password","setPassword","auth_key","submitUserData","bodyObj","LoginRegister","register","setRegister","inputUsername","inputPassword","registerRedirectFunc","defaultValue","App","loggedIn","setLoggedIn","page","setPage","checkLoggedIn","getPageToDisplay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47b6644a.chunk.js","sourcesContent":["const Title =(props)=>{\r\n    const {style} = props;\r\n    return (\r\n        <h1 className={'title'} style={style}>Welcome to Roar</h1>\r\n    )\r\n}\r\n\r\nexport default Title;","import {InputGroup, Button} from \"react-bootstrap\";\r\n\r\nconst Searchbar = (props) => {\r\n    const {userInputFunc, searchFunc} = props;\r\n    return (\r\n        <InputGroup className={'my-3'}>\r\n            <input type={'search'} onChange={(event) => (userInputFunc(event))} className={'form-control'}/>\r\n            <Button variant={'secondary'} onClick={()=>(searchFunc())}>Search</Button>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","const constructPostDictionary =(allUsers)=>{\r\n    const postDictionaryList = [];\r\n    allUsers.forEach((user)=>{\r\n        user.posts.forEach((post)=>{\r\n            let postItem = {\r\n                'postID': post.id,\r\n                'name': user.name,\r\n                'body': post.body,\r\n                'childrenID': []\r\n            }\r\n            const searchChildren3 =(parent, children, recursionLevel)=>{\r\n                if (Array.isArray(children) && (children.length !== 0)) {\r\n                    children.forEach((child)=>{\r\n                        postItem.childrenID.push({pID: parent.id, cID: child.id, level: recursionLevel});\r\n                        recursionLevel += 1;\r\n                        return searchChildren3(child, child.children, recursionLevel);\r\n                    })\r\n                } else {\r\n                    return postItem;\r\n                }\r\n            }\r\n            searchChildren3(post, post.children, 1);\r\n            postDictionaryList.push(postItem);\r\n        })\r\n    })\r\n    return postDictionaryList;\r\n}\r\n\r\nexport default constructPostDictionary;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Post = (props) => {\r\n\r\n    let {\r\n        post, replyBoxProps, replyBoxFunc,\r\n        setReplyBoxText, submitReplyFunc, selfEditBoxProps,\r\n        editBoxFunc, setSelfEditBoxText, submitEditFunc,\r\n        deleteFunc\r\n    } = props;\r\n\r\n    console.log(post)\r\n\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <Card className={'dark-green-bg'}>\r\n    //             <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n    //             <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n    //             <Button variant={'link'} onClick={()=>{replyBoxFunc(replyBoxProps.postID)}}\r\n    //                     className={'button-as-link px-0'}>Reply</Button>\r\n    //         </Card>\r\n    //     </div>\r\n    // )\r\n\r\n    if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-10'}>{post.name}</Card.Title>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        editBoxFunc(selfEditBoxProps.postID)\r\n                                    }}\r\n                            >{'\\u270F'}</Button>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        deleteFunc(post.postID)\r\n                                    }}\r\n                            >{'\\u{1F5D1}'}</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Button variant={'link'} onClick={() => {\r\n                        replyBoxFunc(replyBoxProps.postID)\r\n                    }}\r\n                            className={'button-as-link px-0'}>Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (replyBoxProps.isBox === false && selfEditBoxProps.isEditBox === true) {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setSelfEditBoxText(selfEditBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitEditFunc(selfEditBoxProps.postID)\r\n                    }}>\r\n                        Finish Edit!\r\n                    </Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Card className={'dark-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setReplyBoxText(replyBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitReplyFunc(replyBoxProps.postID)\r\n                    }}\r\n                    >Submit Reply</Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import {Button, Card} from \"react-bootstrap\";\r\n\r\nconst Reply = (props) => {\r\n\r\n    const {\r\n        post, selfEditBoxProps, editBoxFunc,\r\n        setSelfEditBoxText, submitEditFunc,\r\n        deleteFunc\r\n    } = props;\r\n\r\n    if (selfEditBoxProps.isEditBox === false) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <div className={'container-fluid px-0'}>\r\n                        <div className={'row'}>\r\n                            <Card.Title className={'post-name col-10'}>{post.name}</Card.Title>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={() => {\r\n                                        editBoxFunc(selfEditBoxProps.postID)\r\n                                    }}\r\n                            >{'\\u270F'}</Button>\r\n                            <Button variant={'link'}\r\n                                    className={'col-1 justify-content-end card-title button-no-decoration'}\r\n                                    onClick={()=>{\r\n                                        deleteFunc(post.postID)\r\n                                    }}>{'\\u{1F5D1}'}</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card.Text className={'post-text'}>{post.body}</Card.Text>\r\n                    <Card.Text className={'post-text'}>At reply level {post.level}</Card.Text>\r\n                </Card>\r\n            </div>\r\n        )\r\n    } else if (selfEditBoxProps.isEditBox === true) {\r\n        return (\r\n            <div>\r\n                <Card className={'light-green-bg'}>\r\n                    <Card.Title className={'post-name'}>{post.name}</Card.Title>\r\n                    <textarea className={'form-control'} rows={2} onChange={(event) => {\r\n                        setSelfEditBoxText(selfEditBoxProps.postID, event)\r\n                    }}/>\r\n                    <Button variant={'primary'} onClick={() => {\r\n                        submitEditFunc(selfEditBoxProps.postID)\r\n                    }}>\r\n                        Finish Edit!\r\n                    </Button>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Reply;","const getUserID = async (auth)=>{\r\n    let response = await fetch('http://127.0.0.1:8082/users/getID', {\r\n        headers: {\r\n            'token': auth\r\n        }\r\n    })\r\n    return await response.text();\r\n}\r\n\r\nexport default getUserID;","import Post from \"./Post\";\r\nimport Reply from \"./Reply\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst PostsTable = (props) => {\r\n\r\n    const {postDictionary} = props;\r\n\r\n    const [elementArray, setElementArray] = useState([]);\r\n    const [replyBox, setReplyBox] = useState([]);\r\n    const [currentPostDictionary, setCurrentPostDictionary] = useState([]);\r\n    const [selfEdit, setSelfEdit] = useState([]);\r\n\r\n    const pushPostDictionaryChanges = useCallback(() => {\r\n        setCurrentPostDictionary(postDictionary)\r\n    }, [postDictionary])\r\n\r\n    const changeSelfReplyBox = useCallback((selfReplyToChange) => {\r\n        const toApply = [];\r\n        if (!selfReplyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isEditBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setSelfEdit(toApply);\r\n        } else if (selfReplyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (selfReplyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isEditBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (selfReplyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isEditBox': true,\r\n                        'boxText': ''\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setSelfEdit(toApply)\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificSelfReply = useCallback((postID, event) => {\r\n        for (let edit in selfEdit) {\r\n            let currentEdit = selfEdit[edit];\r\n            if (currentEdit.postID === postID) {\r\n                currentEdit.boxText = event.target.value;\r\n                console.log(currentEdit.boxText);\r\n            }\r\n        }\r\n    }, [selfEdit])\r\n\r\n    const submitEdit = useCallback(async (postID) => {\r\n        let editObj;\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let edit in selfEdit) {\r\n            let currentEdit = selfEdit[edit]\r\n            if (currentEdit.postID === postID) {\r\n                editObj = {\r\n                    'body': currentEdit.boxText,\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch(`http://127.0.0.1:8082/posts/update/${postID}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(editObj)\r\n        })\r\n\r\n        if (response.status === 202) {\r\n            console.log('Update successful!')\r\n        } else {\r\n            console.log('Update failed!');\r\n        }\r\n    }, [selfEdit])\r\n\r\n    const deletePost = useCallback(async (postID) => {\r\n            let response = await fetch(`http://127.0.0.1:8082/posts/delete/${postID}`, {\r\n                method: 'DELETE',\r\n            })\r\n            if (response.status === 204) {\r\n                console.log('Delete successful')\r\n            } else {\r\n                console.log('Delete unsuccessful')\r\n            }\r\n        }\r\n        , [])\r\n\r\n    const changeReplyBox = useCallback((replyToChange) => {\r\n        const toApply = [];\r\n        if (!replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                let thisReply = {\r\n                    'postID': currentPost.postID,\r\n                    'isBox': false\r\n                }\r\n                toApply.push(thisReply);\r\n            }\r\n            setReplyBox(toApply);\r\n        } else if (replyToChange) {\r\n            for (let post in postDictionary) {\r\n                let currentPost = postDictionary[post];\r\n                if (replyToChange !== currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': false\r\n                    }\r\n                    toApply.push(thisReply);\r\n                } else if (replyToChange === currentPost.postID) {\r\n                    let thisReply = {\r\n                        'postID': currentPost.postID,\r\n                        'isBox': true,\r\n                        'boxText': '',\r\n                    }\r\n                    toApply.push(thisReply);\r\n                }\r\n            }\r\n            setReplyBox(toApply);\r\n        }\r\n    }, [postDictionary])\r\n\r\n    const changeSpecificReplyBox = useCallback((postID, event) => {\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                currentReply.boxText = event.target.value;\r\n                console.log(currentReply.boxText);\r\n            }\r\n        }\r\n    }, [replyBox])\r\n\r\n    const submitReply = useCallback(async (postID) => {\r\n        let replyObj;\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        for (let reply in replyBox) {\r\n            let currentReply = replyBox[reply];\r\n            if (currentReply.postID === postID) {\r\n                replyObj = {\r\n                    'body': currentReply.boxText,\r\n                    'visibility': true,\r\n                    'user': {\r\n                        'id': userID\r\n                    },\r\n                    'parent': {\r\n                        'id': postID\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let response = await fetch('http://127.0.0.1:8082/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(replyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Reply successful')\r\n        } else {\r\n            console.log('Reply failed')\r\n        }\r\n    }, [replyBox])\r\n\r\n    const makePostElement = useCallback(() => {\r\n\r\n        const newElementArray = [];\r\n\r\n        let ignore = [];\r\n\r\n        const getPost = (ID) => {\r\n            for (let post in currentPostDictionary) {\r\n                if (currentPostDictionary[post].postID === ID) {\r\n                    return {\r\n                        'postID': currentPostDictionary[post].postID,\r\n                        'name': currentPostDictionary[post].name,\r\n                        'body': currentPostDictionary[post].body\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let maxLevel = 0;\r\n\r\n        const getMaxLevel = () => {\r\n            currentPostDictionary.forEach((post) => {\r\n                let a = 0;\r\n                let b = post.postID;\r\n                if (b > a) {\r\n                    maxLevel = b;\r\n                }\r\n                a = b;\r\n            })\r\n        }\r\n\r\n        getMaxLevel();\r\n\r\n        // const removePosts = (posts) => {\r\n        //     // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n        //     //     if (posts.includes(post.postID)) {\r\n        //     //         setCurrentPostDictionary(currentPostDictionary.splice(index, 1));\r\n        //     //     }\r\n        //     // })\r\n        //     for (let post in currentPostDictionary) {\r\n        //         let thisPost = currentPostDictionary[post];\r\n        //         if (posts.includes(thisPost.postID)) {\r\n        //             setCurrentPostDictionary(currentPostDictionary.splice(post, 1));\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        const constructChildren = (children, parentID) => {\r\n            let postsToIgnore = [];\r\n            for (let child in children) {\r\n                let currentChild = children[child];\r\n                if (currentChild.pID === parentID) {\r\n                    let match = getPost(currentChild.cID);\r\n                    match.level = currentChild.level;\r\n                    let selfEditObj = {};\r\n                    selfEdit.forEach((editObj) => {\r\n                        if (match.postID === editObj.postID) {\r\n                            selfEditObj = editObj;\r\n                        }\r\n                    })\r\n                    newElementArray.push(<Reply post={match} key={currentChild.cID}\r\n                                                selfEditBoxProps={selfEditObj} editBoxFunc={changeSelfReplyBox}\r\n                                                setSelfEditBoxText={changeSpecificSelfReply}\r\n                                                submitEditFunc={submitEdit} deleteFunc={deletePost}/>);\r\n                    postsToIgnore.push(currentChild.cID);\r\n                }\r\n            }\r\n            return postsToIgnore;\r\n        }\r\n\r\n\r\n        const constructPostDictionary = () => {\r\n            // currentPostDictionary.forEach((post, index, currentPostDictionary) => {\r\n            //     let fp = getPost(post.postID);\r\n            //     let replyPropObj = {};\r\n            //     replyBox.forEach((replyProp) => {\r\n            //         if (fp.postID === replyProp.postID) {\r\n            //             replyPropObj = replyProp;\r\n            //         }\r\n            //     })\r\n            //     newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n            //                             replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n            //                             submitReplyFunc={submitReply}/>);\r\n            //     let initialParentID = post.postID;\r\n            //     while (initialParentID <= maxLevel) {\r\n            //         constructChildren(post.childrenID, initialParentID);\r\n            //         initialParentID += 1;\r\n            //     }\r\n            // })\r\n            for (let post in currentPostDictionary) {\r\n                let thisPost = currentPostDictionary[post];\r\n                if (!ignore.includes(thisPost.postID)) {\r\n                    let fp = getPost(thisPost.postID);\r\n                    let replyPropObj = {};\r\n                    replyBox.forEach((replyProp) => {\r\n                        if (fp.postID === replyProp.postID) {\r\n                            replyPropObj = replyProp;\r\n                        }\r\n                    })\r\n                    let selfEditObj = {};\r\n                    selfEdit.forEach((editObj) => {\r\n                        if (fp.postID === editObj.postID) {\r\n                            selfEditObj = editObj;\r\n                        }\r\n                    })\r\n                    newElementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n                                               replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n                                               submitReplyFunc={submitReply} selfEditBoxProps={selfEditObj}\r\n                                               editBoxFunc={changeSelfReplyBox}\r\n                                               setSelfEditBoxText={changeSpecificSelfReply}\r\n                                               submitEditFunc={submitEdit} deleteFunc={deletePost}/>);\r\n                    let initialParentID = thisPost.postID;\r\n                    while (initialParentID <= maxLevel) {\r\n                        console.log(ignore);\r\n                        ignore = ignore.concat(constructChildren(thisPost.childrenID, initialParentID));\r\n                        initialParentID += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        constructPostDictionary();\r\n\r\n        setElementArray(newElementArray);\r\n\r\n    }, [changeReplyBox, changeSpecificReplyBox, postDictionary, replyBox, submitReply, changeSelfReplyBox,\r\n        changeSpecificSelfReply, selfEdit])\r\n\r\n    useEffect(() => {\r\n        pushPostDictionaryChanges()\r\n    }, [pushPostDictionaryChanges])\r\n\r\n    useEffect(() => {\r\n        changeReplyBox()\r\n    }, [changeReplyBox])\r\n\r\n    useEffect(() => {\r\n        changeSelfReplyBox()\r\n    }, [changeSelfReplyBox])\r\n\r\n    useEffect(() => {\r\n        makePostElement()\r\n    }, [makePostElement])\r\n\r\n    // const makePostElement = () => {\r\n    //\r\n    //     const getPost = (ID) => {\r\n    //         for (let post in postDictionary) {\r\n    //             if (postDictionary[post].postID === ID) {\r\n    //                 return {\r\n    //                     'postID': postDictionary[post].postID,\r\n    //                     'name': postDictionary[post].name,\r\n    //                     'body': postDictionary[post].body\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //\r\n    //     let maxLevel = 0;\r\n    //\r\n    //     const getMaxLevel = () => {\r\n    //         postDictionary.forEach((post) => {\r\n    //             let a = 0;\r\n    //             let b = post.postID;\r\n    //             if (b > a) {\r\n    //                 maxLevel = b;\r\n    //             }\r\n    //             a = b;\r\n    //         })\r\n    //     }\r\n    //\r\n    //     getMaxLevel();\r\n    //\r\n    //     const removePosts = (posts) => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             if (posts.includes(post.postID)) {\r\n    //                 postDictionary.splice(index, 1);\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //\r\n    //     const constructChildren = (children, parentID) => {\r\n    //         let postsToRemove = [];\r\n    //         children.forEach((replyObj) => {\r\n    //             if (replyObj.pID === parentID) {\r\n    //                 let match = getPost(replyObj.cID);\r\n    //                 match.level = replyObj.level;\r\n    //                 elementArray.push(<Reply post={match} key={replyObj.cID}/>);\r\n    //                 postsToRemove.push(replyObj.cID);\r\n    //             }\r\n    //         })\r\n    //         removePosts(postsToRemove);\r\n    //     }\r\n    //\r\n    //\r\n    //     const constructPostDictionary = () => {\r\n    //         postDictionary.forEach((post, index, postDictionary) => {\r\n    //             let fp = getPost(post.postID);\r\n    //             let replyPropObj = {};\r\n    //             replyBox.forEach((replyProp) => {\r\n    //                 if (fp.postID === replyProp.postID) {\r\n    //                     replyPropObj = replyProp;\r\n    //                 }\r\n    //             })\r\n    //             elementArray.push(<Post post={fp} key={fp.postID} replyBoxProps={replyPropObj}\r\n    //                                     replyBoxFunc={changeReplyBox} setReplyBoxText={changeSpecificReplyBox}\r\n    //             submitReplyFunc={submitReply}/>);\r\n    //             let initialParentID = post.postID;\r\n    //             while (initialParentID <= maxLevel) {\r\n    //                 constructChildren(post.childrenID, initialParentID);\r\n    //                 initialParentID += 1;\r\n    //             }\r\n    //             // postDictionary.splice(index, 1);\r\n    //         })\r\n    //     }\r\n    //\r\n    //     constructPostDictionary();\r\n    //\r\n    //     return elementArray;\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {elementArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsTable;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LogoutButton =(props)=>{\r\n    const {setLogoutFunc, style} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={()=>(setLogoutFunc(false), sessionStorage.setItem('auth-roar', ''))}\r\n        className={'rounded-pill'}>Logout</Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst MakePost =(props)=>{\r\n\r\n    const {setPostText, submitPostFunc} = props;\r\n\r\n    return (\r\n        <div className={'my-2'}>\r\n            <h3 className={'title'}>Speak Your Mind</h3>\r\n            <textarea className={'form-control'} rows={3} id={'post-box'}\r\n            onChange={event => {setPostText(event)}}/>\r\n            <Button variant={'secondary'} onClick={()=>{submitPostFunc()}}\r\n            className={'form-control'}>Submit Post</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MakePost;","import {useCallback, useEffect, useState} from \"react\";\r\nimport Title from \"../coponents/Title\";\r\nimport Searchbar from \"../coponents/Searchbar\";\r\nimport constructPostDictionary from \"../functions/constructPostDictionary\";\r\nimport PostsTable from \"../coponents/PostsTable\";\r\nimport LogoutButton from \"../coponents/LogoutButton\";\r\nimport MakePost from \"../coponents/MakePost\";\r\nimport getUserID from \"../functions/getUserID\";\r\n\r\nconst Homepage = (props) => {\r\n\r\n    const {setLogoutFunc} = props;\r\n\r\n    const [allUsers, setAllUsers] = useState([]);\r\n    const [postDictionary, setPostDictionary] = useState([]);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [postText, setPostText] = useState('');\r\n\r\n    const [reply, setReply] = useState({});\r\n\r\n    const getAllUsers = useCallback(async () => {\r\n        if (!allUsers.length) {\r\n            let response = await fetch('http://127.0.0.1:8082/users/read');\r\n            let allUsers = await response.json();\r\n            setAllUsers(allUsers);\r\n        }\r\n    }, [allUsers.length]);\r\n\r\n    const constructAllPosts = useCallback(() => {\r\n        let newPostDictionary = constructPostDictionary(allUsers);\r\n        if (newPostDictionary.length) {\r\n            setPostDictionary(newPostDictionary);\r\n        } else {\r\n            setPostDictionary([]);\r\n        }\r\n    }, [allUsers]);\r\n\r\n    const constructPage = useCallback(async () => {\r\n        await getAllUsers();\r\n        await constructAllPosts();\r\n    }, [constructAllPosts, getAllUsers]);\r\n\r\n    const submitPost = useCallback(async ()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        let userID = await getUserID(auth);\r\n        let postObj = {\r\n            'body': postText,\r\n            'visibility': true,\r\n            'user': {\r\n                'id': userID\r\n            }\r\n        }\r\n        let postResponse = await fetch('http://127.0.0.1:8082/posts/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(postObj)\r\n        })\r\n\r\n        if (postResponse.status === 201) {\r\n            console.log('Post successful')\r\n        } else {\r\n            console.log('Post unsuccessful')\r\n        }\r\n    }, [postText])\r\n\r\n    const handleInputText = (event) => {\r\n        setSearchText(event.target.value);\r\n    }\r\n\r\n    const handlePostText =(event)=>{\r\n        setPostText(event.target.value);\r\n    }\r\n\r\n    const constructSearch = () => {\r\n        console.log('feature coming soon');\r\n    }\r\n\r\n    useEffect(() => {\r\n        constructPage();\r\n    }, [constructPage, searchText, postText])\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <div className={'row'}>\r\n                <Title/>\r\n                <LogoutButton setLogoutFunc={setLogoutFunc}/>\r\n                <MakePost setPostText={handlePostText} submitPostFunc={submitPost}/>\r\n            </div>\r\n            <div className={'row'}>\r\n                <Searchbar userInputFunc={handleInputText} searchFunc={constructSearch}/>\r\n                <PostsTable postDictionary={postDictionary}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","const LoginInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'text'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Username'}/>\r\n    )\r\n}\r\n\r\nexport default LoginInput;","const PasswordInput =(props)=>{\r\n    const {inputFunc} = props;\r\n    return (\r\n        <input type={'password'} onChange={event => inputFunc(event)}\r\n               className={'form-control rounded-pill my-1'} placeholder={'Password'}/>\r\n    )\r\n}\r\n\r\nexport default PasswordInput;","const LoginTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Login</h3>\r\n    )\r\n}\r\n\r\nexport default LoginTitle;","import {Button} from \"react-bootstrap\";\r\n\r\nconst RegisterButton = (props) => {\r\n    const {redirectFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (redirectFunc())}\r\n                className={'rounded-pill form-control my-1'}>Register</Button>\r\n    )\r\n}\r\n\r\nexport default RegisterButton;","import {Button} from \"react-bootstrap\";\r\n\r\nconst LoginButton = (props) => {\r\n    const {loginFunc} = props;\r\n    return (\r\n        <Button variant={'secondary'} onClick={() => (loginFunc())}\r\n                className={'rounded-pill form-control'}>Login</Button>\r\n    )\r\n}\r\n\r\nexport default LoginButton;","const RegisterTitle =()=>{\r\n    return (\r\n        <h3 className={'title text-center'}>Register</h3>\r\n    )\r\n}\r\n\r\nexport default RegisterTitle;","const FormInput =(props)=>{\r\n    const {inputFunc, type, placeholder} = props;\r\n    return (\r\n        <input type={type} onChange={event => inputFunc(event)}\r\n        className={'form-control rounded-pill my-1'} placeholder={placeholder}/>\r\n    )\r\n}\r\n\r\nexport default FormInput;","import {useCallback, useState} from \"react\";\r\nimport RegisterTitle from \"../coponents/RegisterTitle\";\r\nimport FormInput from \"../coponents/FormInput\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nconst Register = (props) => {\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const inputUsername = (event) => {\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const inputEmail = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const loginFunc = useCallback(async () => {\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        let response = await fetch('http://127.0.0.1:8082/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'username': username,\r\n                'password': password\r\n            }\r\n        });\r\n        let auth_key = await response.text();\r\n        if (auth_key !== 'INVALID') {\r\n            sessionStorage.setItem('auth-roar', auth_key);\r\n            console.log('Successfully logged in');\r\n            setLoginFunc(true);\r\n        } else {\r\n            console.log('Unsuccessful attempt');\r\n        }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const submitUserData = async () => {\r\n\r\n        let bodyObj = {\r\n            'username': username,\r\n            'name': name,\r\n            'email': email,\r\n            'password': password\r\n        }\r\n\r\n        let response = await fetch('http://127.0.0.1:8082/users/create', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(bodyObj)\r\n        })\r\n\r\n        if (response.status === 201) {\r\n            console.log('Successfully created');\r\n            // setLoginUsername(username);\r\n            // setLoginPassword(password);\r\n            // setRegister(false);\r\n            await loginFunc();\r\n        } else {\r\n            console.log('Unsuccessful!')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n            <RegisterTitle/>\r\n            <FormInput inputFunc={inputUsername} type={'text'} placeholder={'Username'}/>\r\n            <FormInput inputFunc={inputName} type={'text'} placeholder={'Name'}/>\r\n            <FormInput inputFunc={inputEmail} type={'email'} placeholder={'Email'}/>\r\n            <FormInput inputFunc={inputPassword} type={'password'} placeholder={'Password'}/>\r\n            <Button variant={'secondary'} onClick={() => {\r\n                submitUserData()\r\n            }} className={'rounded-pill form-control'}>Submit</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;","import {useCallback, useEffect, useState} from \"react\";\r\nimport LoginInput from \"../coponents/LoginInput\";\r\nimport PasswordInput from \"../coponents/PasswordInput\";\r\nimport LoginTitle from \"../coponents/LoginTitle\";\r\nimport RegisterButton from \"../coponents/RegisterButton\";\r\nimport LoginButton from \"../coponents/LoginButton\";\r\nimport Register from \"./Register\";\r\n\r\nconst LoginRegister =(props)=>{\r\n\r\n    const {setLoginFunc} = props;\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [register, setRegister] = useState(false);\r\n\r\n    const inputUsername = (event) =>{\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    const inputPassword = (event)=>{\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const registerRedirectFunc =()=>{\r\n        setRegister(true);\r\n    }\r\n    \r\n    const loginFunc = useCallback(async()=>{\r\n            console.log(`username: ${username}, password: ${password}`)\r\n            let response = await fetch('http://127.0.0.1:8082/users/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'username': username,\r\n                    'password': password\r\n                }\r\n            });\r\n            let auth_key = await response.text();\r\n            if (auth_key !== 'INVALID') {\r\n                sessionStorage.setItem('auth-roar', auth_key);\r\n                console.log('Successfully logged in');\r\n                setLoginFunc(true);\r\n            } else {\r\n                console.log('Unsuccessful attempt');\r\n            }\r\n    }, [password, setLoginFunc, username])\r\n\r\n    const constructPage = useCallback(()=>{\r\n        console.log(`username: ${username}, password: ${password}`)\r\n        if (!register) {\r\n            return (\r\n                <div className={'container-fluid mt-3 col-lg-6 col-sm-12'}>\r\n                    <LoginTitle/>\r\n                    <LoginInput inputFunc={inputUsername} defaultValue={username}/>\r\n                    <PasswordInput inputFunc={inputPassword} defaultValue={password}/>\r\n                    <LoginButton loginFunc={loginFunc}/>\r\n                    <div className={'separator post-text'}>Or</div>\r\n                    <RegisterButton redirectFunc={registerRedirectFunc}/>\r\n                </div>\r\n            )\r\n        } else if (register) {\r\n            return (\r\n                <Register setLoginFunc={setLoginFunc}/>\r\n            )\r\n        }\r\n    }, [loginFunc, password, register, username])\r\n\r\n    // useEffect(()=>{\r\n    //     constructPage()\r\n    // }, [constructPage])\r\n\r\n    return (\r\n        <div>\r\n            {constructPage()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginRegister;","import 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/roar.css';\r\nimport './css/fonts.css';\r\nimport Homepage from \"./pages/Homepage\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport LoginRegister from \"./pages/LoginRegister\";\r\n\r\nconst App = () => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    const [page, setPage] = useState([]);\r\n\r\n    const checkLoggedIn = useCallback(()=>{\r\n        let auth = sessionStorage.getItem('auth-roar');\r\n        if (auth && (auth !== 'INVALID')) {\r\n            setLoggedIn(true);\r\n        } else {\r\n            setLoggedIn(false);\r\n        }\r\n    }, [])\r\n\r\n    const getPageToDisplay = useCallback(()=>{\r\n        if (loggedIn) {\r\n            setPage([<Homepage setLogoutFunc={setLoggedIn}/>]);\r\n        } else {\r\n            setPage([<LoginRegister setLoginFunc={setLoggedIn}/>]);\r\n        }\r\n    }, [loggedIn])\r\n\r\n    useEffect(()=>{\r\n        checkLoggedIn();\r\n        getPageToDisplay();\r\n    }, [checkLoggedIn, getPageToDisplay])\r\n    return (\r\n        <div>\r\n            {page}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}